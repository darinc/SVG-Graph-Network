!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.GraphNetwork=e():t.GraphNetwork=e()}(this,function(){return function(){"use strict";var t={d:function(e,i){for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}},e={};t.d(e,{default:function(){return T}});class i{constructor(t=0,e=0){this.x=t,this.y=e}add(t){return new i(this.x+t.x,this.y+t.y)}subtract(t){return new i(this.x-t.x,this.y-t.y)}multiply(t){return new i(this.x*t,this.y*t)}divide(t){if(0===t)throw new Error("Division by zero");return new i(this.x/t,this.y/t)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const t=this.magnitude();if(0===t)throw new Error("Cannot normalize zero vector");return new i(this.x/t,this.y/t)}static distance(t,e){const i=t.x-e.x,s=t.y-e.y;return Math.sqrt(i*i+s*s)}static zero(){return new i(0,0)}static unitX(){return new i(1,0)}static unitY(){return new i(0,1)}static fromPolar(t,e){return new i(t*Math.cos(e),t*Math.sin(e))}angle(){return Math.atan2(this.y,this.x)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}clone(){return new i(this.x,this.y)}equals(t,e=1e-10){return Math.abs(this.x-t.x)<e&&Math.abs(this.y-t.y)<e}toString(){return`Vector(${this.x.toFixed(3)}, ${this.y.toFixed(3)})`}toArray(){return[this.x,this.y]}toObject(){return{x:this.x,y:this.y}}}class s{constructor(t,e=800,s=600){this.data=t,this.dynamicWidth=null,this.dynamicHeight=null,this.position=new i(Math.random()*e,Math.random()*s),this.velocity=new i,this.force=new i,this.size=void 0!==t.size?t.size:20,this.isFixed=!1}resetPosition(t,e){this.velocity=new i,this.isFixed||(this.position=new i(Math.random()*t,Math.random()*e))}fix(){this.isFixed=!0,this.velocity=new i}unfix(){this.isFixed=!1}getName(){return this.data.name}getId(){return this.data.id}getType(){return this.data.type}getShape(){return this.data.shape||"circle"}hasSameType(t){return void 0!==this.data.type&&void 0!==t.data.type&&this.data.type===t.data.type}distanceTo(t){return i.distance(this.position,t.position)}directionTo(t){return t.position.subtract(this.position).normalize()}applyForce(t){this.force=this.force.add(t)}resetForce(){this.force=new i}updatePosition(t=1,e=.95){this.isFixed||(this.velocity=this.velocity.add(this.force.multiply(t)),this.velocity=this.velocity.multiply(e),this.position=this.position.add(this.velocity.multiply(t)))}getEffectiveRadius(){switch(this.getShape()){case"rectangle":return this.dynamicWidth&&this.dynamicHeight?Math.max(this.dynamicWidth,this.dynamicHeight)/2:1.4*this.size;case"square":case"triangle":return 1.4*this.size;default:return this.size}}clone(t,e){const i=new s({...this.data},t,e);return void 0!==t&&void 0!==e||(i.position=this.position.clone(),i.isFixed=this.isFixed),i}toObject(){return{data:this.data,position:this.position.toObject(),velocity:this.velocity.toObject(),isFixed:this.isFixed,size:this.size}}toString(){return`Node(${this.data.id}: "${this.data.name}" at ${this.position.toString()})`}static fromObject(t,e,n){const o=new s(t.data,e,n);return t.position&&(o.position=new i(t.position.x,t.position.y)),t.velocity&&(o.velocity=new i(t.velocity.x,t.velocity.y)),void 0!==t.isFixed&&(o.isFixed=t.isFixed),void 0!==t.size&&(o.size=t.size),o}}class n{constructor(t={}){this.config={damping:.95,repulsionStrength:6500,attractionStrength:.001,groupingStrength:.001,...t}}updateConfig(t){Object.assign(this.config,t)}updateForces(t,e,i=null){const s=Array.from(t.values());s.forEach(t=>t.resetForce());for(let t=0;t<s.length;t++)for(let e=t+1;e<s.length;e++){const n=s[t],o=s[e];(!i||i.has(n.getId())&&i.has(o.getId()))&&(this._calculateRepulsionForce(n,o),this._calculateGroupingForce(n,o))}return e.forEach(t=>{(!i||i.has(t.source.getId())&&i.has(t.target.getId()))&&this._calculateAttractionForce(t.source,t.target,t.weight)}),this._calculateMetrics(t,i)}updatePositions(t,e=null,i=1){Array.from(t.values()).forEach(t=>{t.isFixed||e&&!e.has(t.getId())||t.updatePosition(i,this.config.damping)})}_calculateRepulsionForce(t,e){const s=t.position.subtract(e.position),n=s.magnitude();if(0===n){const s=2*Math.random()*Math.PI,n=i.fromPolar(.01*this.config.repulsionStrength,s);return t.applyForce(n),void e.applyForce(n.multiply(-1))}const o=.5*(t.getEffectiveRadius()+e.getEffectiveRadius()),a=Math.max(n,o),r=s.normalize().multiply(this.config.repulsionStrength/(a*a));t.applyForce(r),e.applyForce(r.multiply(-1))}_calculateGroupingForce(t,e){if(!t.hasSameType(e)||this.config.groupingStrength<=0)return;const i=t.position.subtract(e.position),s=i.magnitude();if(0===s)return;const n=i.normalize().multiply(-this.config.groupingStrength*s);t.applyForce(n),e.applyForce(n.multiply(-1))}_calculateAttractionForce(t,e,i=1){const s=t.position.subtract(e.position),n=s.magnitude();if(0===n)return;const o=s.normalize().multiply(this.config.attractionStrength*n*i);t.applyForce(o.multiply(-1)),e.applyForce(o)}_calculateMetrics(t,e){const i=Array.from(t.values()),s=e?i.filter(t=>e.has(t.getId())):i;let n=0,o=0,a=0;return s.forEach(t=>{const e=t.force.magnitude(),i=t.velocity.magnitude()*t.velocity.magnitude()*.5;n+=i,a+=e,o=Math.max(o,e)}),{totalEnergy:n,maxForce:o,averageForce:s.length>0?a/s.length:0,nodeCount:i.length,activeNodeCount:s.length}}getConfig(){return{...this.config}}resetForces(t){Array.from(t.values()).forEach(t=>t.resetForce())}applyExternalForce(t,e,i){const s=i.get(t);return!!s&&(s.applyForce(e),!0)}calculateCenterOfMass(t,e=null){const s=Array.from(t.values()),n=e?s.filter(t=>e.has(t.getId())):s;return 0===n.length?new i:n.reduce((t,e)=>t.add(e.position),new i).divide(n.length)}applyCenteringForce(t,e=null,i=.001){const s=this.calculateCenterOfMass(t,e),n=Array.from(t.values());(e?n.filter(t=>e.has(t.getId())):n).forEach(t=>{if(t.isFixed)return;const e=s.subtract(t.position),n=e.magnitude();if(n>0){const s=e.normalize().multiply(i*n);t.applyForce(s)}})}isInEquilibrium(t,e=.1){return t.totalEnergy<e&&t.maxForce<e}static createLink(t,e,i,s){const n=i.get(t),o=i.get(e);return n&&o?{source:n,target:o,weight:s}:null}static createLinks(t,e){return t.map(t=>n.createLink(t.source,t.target,e,t.weight)).filter(t=>null!==t)}toObject(){return{config:this.getConfig(),type:"PhysicsEngine",version:"2.0.0"}}toString(){return`PhysicsEngine(damping: ${this.config.damping}, repulsion: ${this.config.repulsionStrength})`}}class o{constructor(t,e={},i={}){this.titleElement=null,this.breadcrumbsElement=null,this.legendElement=null,this.controls=null,this.settingsPanel=null,this.mobileControls=null,this.zoomInButton=null,this.zoomOutButton=null,this.resetButton=null,this.themeToggle=null,this.settingsToggle=null,this.settingsVisible=!1,this.container=t,this.config={showControls:!0,showLegend:!0,showTitle:!0,showBreadcrumbs:!0,theme:"dark",title:"Graph Network",...e},this.callbacks=i}initialize(){this.createTitle(),this.createBreadcrumbs(),this.createLegend(),this.createControls(),this.createSettingsPanel()}setElementClass(t,e){try{t.className=e}catch{t.classList.add(e)}}createTitle(){this.config.showTitle&&(this.titleElement=document.createElement("h2"),this.setElementClass(this.titleElement,"graph-network-title"),this.titleElement.textContent=this.config.title,this.container.appendChild(this.titleElement))}createBreadcrumbs(){this.config.showBreadcrumbs&&(this.breadcrumbsElement=document.createElement("div"),this.setElementClass(this.breadcrumbsElement,"graph-network-breadcrumbs"),this.container.appendChild(this.breadcrumbsElement))}generateLegendItems(t){const e=new Set,i=new Map;return t.forEach(t=>{const s=t.getType();s&&!e.has(s)&&(e.add(s),i.set(s,{type:s,shape:t.getShape(),color:this.getNodeTypeColor(s)}))}),Array.from(i.values())}getNodeTypeColor(t){return{primary:"#E53E3E",secondary:"#4299E1",tertiary:"#38A169",auxiliary:"#ED8936",major_power:"#E53E3E",regional_power:"#4299E1",small_nation:"#38A169",territory:"#ED8936"}[t]||"#666666"}createLegend(t=[]){if(this.config.showLegend){if(!this.legendElement){this.legendElement=document.createElement("div"),this.setElementClass(this.legendElement,"graph-network-legend");const t=document.createElement("div");this.setElementClass(t,"graph-network-legend-header"),t.textContent="Node Types";const e=document.createElement("button");this.setElementClass(e,"graph-network-legend-toggle"),e.textContent="−",e.addEventListener("click",()=>this.toggleLegend()),t.appendChild(e),this.legendElement.appendChild(t);const i=document.createElement("div");this.setElementClass(i,"graph-network-legend-content"),this.legendElement.appendChild(i),this.container.appendChild(this.legendElement)}this.updateLegend(t)}}updateLegend(t){if(!this.legendElement)return;const e=this.legendElement.querySelector(".graph-network-legend-content");if(!e)return;const i=this.generateLegendItems(t);e.innerHTML="",i.forEach(t=>{const i=document.createElement("div");this.setElementClass(i,"graph-network-legend-item");const s=document.createElement("div");this.setElementClass(s,`graph-network-legend-shape graph-network-legend-${t.shape}`),s.style.backgroundColor=t.color;const n=document.createElement("span");n.textContent=t.type.replace(/_/g," ").replace(/\b\w/g,t=>t.toUpperCase()),i.appendChild(s),i.appendChild(n),e.appendChild(i)})}toggleLegend(){if(!this.legendElement)return;const t=this.legendElement.querySelector(".graph-network-legend-toggle");this.legendElement.classList.contains("minimized")?(this.legendElement.classList.remove("minimized"),t&&(t.textContent="−")):(this.legendElement.classList.add("minimized"),t&&(t.textContent="+"))}createControls(){this.config.showControls&&(this.controls=document.createElement("div"),this.setElementClass(this.controls,"graph-network-controls"),this.mobileControls=document.createElement("div"),this.setElementClass(this.mobileControls,"graph-network-mobile-controls"),this.createZoomButtons(),this.createUtilityButtons(),this.controls.appendChild(this.mobileControls),this.themeToggle&&this.controls.appendChild(this.themeToggle),this.settingsToggle&&this.controls.appendChild(this.settingsToggle),this.container.appendChild(this.controls))}createZoomButtons(){this.mobileControls&&(this.zoomInButton=document.createElement("button"),this.setElementClass(this.zoomInButton,"graph-network-zoom-button graph-network-zoom-in"),this.zoomInButton.textContent="+",this.zoomInButton.addEventListener("click",()=>{this.callbacks.onZoomIn?.()}),this.zoomOutButton=document.createElement("button"),this.setElementClass(this.zoomOutButton,"graph-network-zoom-button graph-network-zoom-out"),this.zoomOutButton.textContent="−",this.zoomOutButton.addEventListener("click",()=>{this.callbacks.onZoomOut?.()}),this.resetButton=document.createElement("button"),this.setElementClass(this.resetButton,"graph-network-reset-view-button"),this.resetButton.textContent="⊙",this.resetButton.addEventListener("click",()=>{this.callbacks.onResetView?.()}),this.mobileControls.appendChild(this.zoomInButton),this.mobileControls.appendChild(this.zoomOutButton),this.mobileControls.appendChild(this.resetButton))}createUtilityButtons(){this.themeToggle=document.createElement("button"),this.setElementClass(this.themeToggle,"graph-network-theme-toggle"),this.themeToggle.textContent="light"===this.config.theme?"🌙":"🌞",this.themeToggle.addEventListener("click",()=>{this.callbacks.onToggleTheme?.()}),this.settingsToggle=document.createElement("button"),this.setElementClass(this.settingsToggle,"graph-network-settings-toggle"),this.settingsToggle.textContent="^",this.settingsToggle.addEventListener("click",()=>this.toggleSettings())}createSettingsPanel(){if(!this.config.showControls)return;this.settingsPanel=document.createElement("div"),this.setElementClass(this.settingsPanel,"graph-network-settings");const t=document.createElement("h3");t.textContent="Physics Settings",this.settingsPanel.appendChild(t),this.createPhysicsControls(),this.settingsPanel.addEventListener("click",t=>{t.stopPropagation()}),this.container.appendChild(this.settingsPanel)}createPhysicsControls(){this.settingsPanel&&[{key:"damping",label:"Damping",min:0,max:20,step:.5,value:10,description:"Velocity decay factor"},{key:"repulsionStrength",label:"Repulsion",min:0,max:20,step:.5,value:13,description:"Node repulsion force"},{key:"attractionStrength",label:"Attraction",min:0,max:20,step:.1,value:10,description:"Link attraction force"},{key:"groupingStrength",label:"Grouping",min:0,max:20,step:.5,value:10,description:"Same-type grouping force"},{key:"filterDepth",label:"Filter Depth",min:1,max:5,step:1,value:1,description:"Connection levels to show when filtering"}].forEach(t=>{const e=document.createElement("div");this.setElementClass(e,"graph-network-control");const i=document.createElement("label");i.textContent=t.label;const s=document.createElement("input");s.type="range",s.min=t.min.toString(),s.max=t.max.toString(),s.step=t.step.toString(),s.value=t.value.toString();const n=document.createElement("span");this.setElementClass(n,"graph-network-control-value"),n.textContent=t.value.toFixed(1),s.addEventListener("input",e=>{const i=e.target,s=parseFloat(i.value),o=this.convertUserValueToPhysics(t.key,s);n.textContent=s.toFixed(1),this.callbacks.onConfigChange?.(t.key,o)}),e.appendChild(i),e.appendChild(s),e.appendChild(n),this.settingsPanel.appendChild(e)})}toggleSettings(){this.settingsPanel&&this.settingsToggle&&(this.settingsVisible=!this.settingsVisible,this.settingsVisible?this.settingsPanel.classList.add("is-open"):this.settingsPanel.classList.remove("is-open"),this.settingsToggle.textContent=this.settingsVisible?"v":"^")}closeSettings(){this.settingsPanel&&this.settingsVisible&&(this.settingsVisible=!1,this.settingsPanel.classList.remove("is-open"),this.settingsToggle&&(this.settingsToggle.textContent="^"))}updateThemeToggle(t){this.themeToggle&&(this.themeToggle.textContent="light"===t?"🌙":"🌞")}renderBreadcrumbs(t){this.breadcrumbsElement&&(this.breadcrumbsElement.innerHTML="",t.forEach((e,i)=>{if(i>0){const t=document.createElement("span");this.setElementClass(t,"graph-network-breadcrumb-separator"),t.textContent=" > ",this.breadcrumbsElement.appendChild(t)}const s=document.createElement("span");this.setElementClass(s,"graph-network-breadcrumb"),i===t.length-1&&s.classList.add("active"),s.textContent=e.name,s.addEventListener("click",()=>{e.action&&this.callbacks.onBreadcrumbClick?.(e.action)}),this.breadcrumbsElement.appendChild(s)}))}convertUserValueToPhysics(t,e){const i=parseFloat(e.toString());switch(t){case"damping":if(0===i)return 1;{const t=i/20;return Math.exp(Math.log(1)*(1-t)+Math.log(.35)*t)}case"repulsionStrength":return 500*i;case"attractionStrength":case"groupingStrength":return i/1e4;case"filterDepth":return parseInt(i.toString());default:return i}}updateConfig(t){Object.assign(this.config,t)}getUIElements(){return{container:this.container,titleElement:this.titleElement||void 0,legendElement:this.legendElement||void 0,controls:this.controls||void 0,settingsPanel:this.settingsPanel||void 0}}getConfig(){return{...this.config}}isSettingsVisible(){return this.settingsVisible}setElementEnabled(t,e){switch(t){case"zoom":this.zoomInButton&&(this.zoomInButton.disabled=!e),this.zoomOutButton&&(this.zoomOutButton.disabled=!e);break;case"reset":this.resetButton&&(this.resetButton.disabled=!e);break;case"theme":this.themeToggle&&(this.themeToggle.disabled=!e);break;case"settings":this.settingsToggle&&(this.settingsToggle.disabled=!e)}}updateTitle(t){this.titleElement&&(this.titleElement.textContent=t),this.config.title=t}toObject(){return{config:this.config,settingsVisible:this.settingsVisible,elementCounts:{title:null!==this.titleElement,breadcrumbs:null!==this.breadcrumbsElement,legend:null!==this.legendElement,controls:null!==this.controls,settingsPanel:null!==this.settingsPanel},type:"UIManager",version:"2.0.0"}}destroy(){[this.titleElement,this.breadcrumbsElement,this.legendElement,this.controls,this.settingsPanel].forEach(t=>{t&&t.parentNode&&t.parentNode.removeChild(t)}),this.titleElement=null,this.breadcrumbsElement=null,this.legendElement=null,this.controls=null,this.settingsPanel=null,this.mobileControls=null,this.zoomInButton=null,this.zoomOutButton=null,this.resetButton=null,this.themeToggle=null,this.settingsToggle=null}toString(){return`UIManager(container: ${this.container.id||"unnamed"}, theme: ${this.config.theme})`}}class a{constructor(t,e,i={}){this.canvas=null,this.svg=null,this.transformGroup=null,this.linkGroup=null,this.nodeGroup=null,this.labelGroup=null,this.nodeElements=new Map,this.linkElements=new Map,this.transformState={x:0,y:0,scale:1},this.textCanvas=null,this.textContext=null,this.container=t,this.containerId=e,this.config={showLabels:!0,animationDuration:300,fontFamily:"Arial",fontSize:14,debug:!1,...i}}initialize(){this.createSVGContainer(),this.setupTextMeasurement()}createSVGContainer(){const t=this.container.querySelector(".graph-network-canvas");t&&t.remove();const e=this.container.getBoundingClientRect(),i=e.width,s=e.height;this.canvas=document.createElement("div"),this.canvas.className="graph-network-canvas",this.container.appendChild(this.canvas),this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.svg.setAttribute("width",i.toString()),this.svg.setAttribute("height",s.toString()),this.svg.style.display="block",this.svg.style.backgroundColor="var(--bg-primary)",this.transformGroup=document.createElementNS("http://www.w3.org/2000/svg","g"),this.transformGroup.classList.add("transform-group"),this.linkGroup=document.createElementNS("http://www.w3.org/2000/svg","g"),this.linkGroup.classList.add("links"),this.labelGroup=document.createElementNS("http://www.w3.org/2000/svg","g"),this.labelGroup.classList.add("edge-labels"),this.nodeGroup=document.createElementNS("http://www.w3.org/2000/svg","g"),this.nodeGroup.classList.add("nodes"),this.transformGroup.appendChild(this.linkGroup),this.transformGroup.appendChild(this.labelGroup),this.transformGroup.appendChild(this.nodeGroup),this.svg.appendChild(this.transformGroup),this.createArrowMarker(),this.canvas.appendChild(this.svg)}createArrowMarker(){if(!this.svg)return;const t=document.createElementNS("http://www.w3.org/2000/svg","defs"),e=document.createElementNS("http://www.w3.org/2000/svg","marker");e.setAttribute("id",`arrowhead-${this.containerId}`),e.setAttribute("viewBox","0 -5 10 10"),e.setAttribute("refX","8"),e.setAttribute("refY","0"),e.setAttribute("orient","auto"),e.setAttribute("markerUnits","strokeWidth");const i=document.createElementNS("http://www.w3.org/2000/svg","path");i.setAttribute("d","M0,-5L10,0L0,5"),i.setAttribute("fill","#5a5a5a"),e.appendChild(i),t.appendChild(e),this.svg.appendChild(t)}setupTextMeasurement(){this.textCanvas=document.createElement("canvas"),this.textContext=this.textCanvas.getContext("2d"),this.textContext&&(this.textContext.font=`${this.config.fontSize}px ${this.config.fontFamily}`)}measureTextWidth(t){return this.textContext?this.textContext.measureText(t).width:8*t.length}createElements(t,e){this.linkGroup&&this.labelGroup&&this.nodeGroup||this.createSVGContainer(),this.clearElements(),this.createLinkElements(e),this.createNodeElements(t)}createLinkElements(t){this.linkGroup&&this.labelGroup&&t.forEach(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","line");e.classList.add("link"),e.setAttribute("marker-end",`url(#arrowhead-${this.containerId})`),t.weight&&(e.style.strokeWidth=`${t.weight}px`),"dashed"===t.line_type?e.style.strokeDasharray="5, 5":"dotted"===t.line_type&&(e.style.strokeDasharray="2, 2"),this.linkGroup.appendChild(e);const i=document.createElementNS("http://www.w3.org/2000/svg","rect");i.classList.add("edge-label-background"),this.labelGroup.appendChild(i);const s=document.createElementNS("http://www.w3.org/2000/svg","text");s.textContent=t.label||"",s.classList.add("edge-label-text"),this.labelGroup.appendChild(s),this.linkElements.set(t,{linkEl:e,labelText:s,labelBackground:i})})}createNodeElements(t){this.nodeGroup&&Array.from(t.values()).forEach(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","g");e.setAttribute("data-id",t.getId());const{shapeElement:i,hiddenIndicator:s}=this.createNodeShape(t),n=this.createNodeText(t);s&&e.appendChild(s),e.appendChild(i),e.appendChild(n),this.nodeGroup.appendChild(e),this.nodeElements.set(t,{group:e,shape:i,text:n,hiddenIndicator:s})})}createNodeShape(t){let e,i;switch(t.getShape()){case"rectangle":{const s=this.measureTextWidth(t.getName()),n=20,o=2*t.size,a=Math.max(o,s+n),r=1.4*t.size;t.dynamicWidth=a,t.dynamicHeight=r;const h=4;i=document.createElementNS("http://www.w3.org/2000/svg","rect"),i.setAttribute("x",(-(a+h)/2).toString()),i.setAttribute("y",(-(r+h)/2).toString()),i.setAttribute("width",(a+h).toString()),i.setAttribute("height",(r+h).toString()),i.setAttribute("rx","5"),i.classList.add("hidden-connection-indicator"),i.style.display="none",e=document.createElementNS("http://www.w3.org/2000/svg","rect"),e.setAttribute("x",(-a/2).toString()),e.setAttribute("y",(-r/2).toString()),e.setAttribute("width",a.toString()),e.setAttribute("height",r.toString()),e.setAttribute("rx","5");break}case"square":{const i=1.4*t.size;e=document.createElementNS("http://www.w3.org/2000/svg","rect"),e.setAttribute("x",(-i/2).toString()),e.setAttribute("y",(-i/2).toString()),e.setAttribute("width",i.toString()),e.setAttribute("height",i.toString()),e.setAttribute("rx","5");break}case"triangle":{const i=1.4*t.size,s=i*Math.sqrt(3)/2,n=[[0,-s/2],[-i/2,s/2],[i/2,s/2]].map(t=>t.join(",")).join(" ");e=document.createElementNS("http://www.w3.org/2000/svg","polygon"),e.setAttribute("points",n);break}default:e=document.createElementNS("http://www.w3.org/2000/svg","circle"),e.setAttribute("r",t.size.toString())}e.classList.add("node");const s=t.getType();return s&&(e.classList.add(`node-${s}`),e.setAttribute("data-type",s)),{shapeElement:e,hiddenIndicator:i}}createNodeText(t){const e=document.createElementNS("http://www.w3.org/2000/svg","text");return e.textContent=t.getName(),e.classList.add("node-label"),e.setAttribute("text-anchor","middle"),e.setAttribute("dominant-baseline","central"),e}render(t,e,i=null){this.transformGroup&&(this.transformGroup.style.transform=`translate(${this.transformState.x}px, ${this.transformState.y}px) scale(${this.transformState.scale})`),this.updateLinkPositions(e,i),this.updateNodePositions(t,i)}updateLinkPositions(t,e=null){t.forEach(t=>{const i=this.linkElements.get(t);if(!i)return;const s=!e||e.has(t.source.getId())&&e.has(t.target.getId());i.linkEl.style.opacity=s?"1":"0.1",i.labelText.style.opacity=s?"1":"0.1",i.labelBackground.style.opacity=s?"1":"0.1";const n=t.source.position,o=t.target.position,a=o.subtract(n),r=a.magnitude();let h=o.x,l=o.y;if("rectangle"===t.target.getShape()&&r>0){const e=(t.target.dynamicWidth||2.8*t.target.size)/2,i=(t.target.dynamicHeight||1.4*t.target.size)/2,s=Math.atan2(a.y,a.x),n=Math.abs(s);let r=e,d=i;n>Math.atan2(i,e)&&n<Math.PI-Math.atan2(i,e)?r=i/Math.tan(n):d=e*Math.tan(n),h=o.x-r*Math.sign(a.x),l=o.y-d*Math.sign(a.y)}else if("circle"===t.target.getShape()&&r>t.target.size){const e=(r-t.target.size)/r;h=n.x+a.x*e,l=n.y+a.y*e}if(i.linkEl.setAttribute("x1",n.x.toString()),i.linkEl.setAttribute("y1",n.y.toString()),i.linkEl.setAttribute("x2",h.toString()),i.linkEl.setAttribute("y2",l.toString()),this.config.showLabels&&i.labelText.textContent){const t=(n.x+h)/2,e=(n.y+l)/2;i.labelText.setAttribute("x",t.toString()),i.labelText.setAttribute("y",e.toString()),this.updateLabelBackground(i.labelText,i.labelBackground)}})}updateLabelBackground(t,e){if(e&&t.textContent)try{const i=t.getBBox(),s=4;e.setAttribute("x",(i.x-s).toString()),e.setAttribute("y",(i.y-s).toString()),e.setAttribute("width",(i.width+2*s).toString()),e.setAttribute("height",(i.height+2*s).toString())}catch(t){this.config.debug&&console.warn("Could not get text bounding box:",t)}}updateNodePositions(t,e=null){Array.from(t.values()).forEach(t=>{const i=this.nodeElements.get(t);if(i){i.group.setAttribute("transform",`translate(${t.position.x},${t.position.y})`);const s=!e||e.has(t.getId());if(i.group.style.opacity=s?"1":"0.1",i.hiddenIndicator){const s=e&&!e.has(t.getId());i.hiddenIndicator.style.display=s?"block":"none"}}})}setTransform(t,e,i){this.transformState.x=t,this.transformState.y=e,this.transformState.scale=i}getTransform(){return{...this.transformState}}resize(t,e){this.svg&&(this.svg.setAttribute("width",t.toString()),this.svg.setAttribute("height",e.toString()))}clearElements(){this.linkGroup&&(this.linkGroup.innerHTML=""),this.labelGroup&&(this.labelGroup.innerHTML=""),this.nodeGroup&&(this.nodeGroup.innerHTML=""),this.nodeElements.clear(),this.linkElements.clear()}getSVGElement(){return this.svg}getSVGElements(){return this.svg&&this.transformGroup&&this.linkGroup&&this.nodeGroup&&this.labelGroup?{svg:this.svg,transformGroup:this.transformGroup,linkGroup:this.linkGroup,nodeGroup:this.nodeGroup,labelGroup:this.labelGroup}:null}getNodeElements(){return this.nodeElements}getLinkElements(){return this.linkElements}getBounds(t,e=null){const i=Array.from(t.values()),s=e?i.filter(t=>e.has(t.getId())):i;if(0===s.length)return{x:0,y:0,width:0,height:0};let n=1/0,o=1/0,a=-1/0,r=-1/0;return s.forEach(t=>{const e=t.getEffectiveRadius();n=Math.min(n,t.position.x-e),o=Math.min(o,t.position.y-e),a=Math.max(a,t.position.x+e),r=Math.max(r,t.position.y+e)}),{x:n,y:o,width:a-n,height:r-o}}screenToSVG(t,e){if(!this.svg)return new i(t,e);const s=this.svg.getBoundingClientRect(),n=(t-s.left-this.transformState.x)/this.transformState.scale,o=(e-s.top-this.transformState.y)/this.transformState.scale;return new i(n,o)}svgToScreen(t,e){if(!this.svg)return new i(t,e);const s=this.svg.getBoundingClientRect(),n=t*this.transformState.scale+this.transformState.x+s.left,o=e*this.transformState.scale+this.transformState.y+s.top;return new i(n,o)}static createRenderLink(t,e){const i=e.get(t.source),s=e.get(t.target);return i&&s?{source:i,target:s,label:t.label,weight:t.weight,line_type:t.line_type}:null}static createRenderLinks(t,e){return t.map(t=>a.createRenderLink(t,e)).filter(t=>null!==t)}toObject(){return{config:this.config,transformState:this.transformState,elementCounts:{nodes:this.nodeElements.size,links:this.linkElements.size},type:"SVGRenderer",version:"2.0.0"}}destroy(){this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas),this.clearElements(),this.canvas=null,this.svg=null,this.transformGroup=null,this.linkGroup=null,this.nodeGroup=null,this.labelGroup=null,this.textCanvas=null,this.textContext=null}toString(){return`SVGRenderer(container: ${this.containerId}, nodes: ${this.nodeElements.size}, links: ${this.linkElements.size})`}}class r{constructor(t={}){this.eventCallbacks=new Map,this.svg=null,this.nodes=null,this.callbacks={},this.config={zoomSensitivity:1.01,filterDepth:1,...t},this.interactionState={isDragging:!1,isPanning:!1,isPinching:!1,dragNode:null,wasNodeFixed:!1,lastMouseX:0,lastMouseY:0,lastTouchTime:0,touchStartTime:0,lastTouchEndTime:0,touchTarget:null,dragStartPosition:null,lastPinchDistance:0,lastPinchCenterX:0,lastPinchCenterY:0,lastTouchX:0,lastTouchY:0},this.transformState={x:0,y:0,scale:1}}initialize(t,e,i={}){this.svg=t,this.nodes=e,this.callbacks=i,this.setupEventListeners()}setupEventListeners(){this.svg&&(this.setupNodeEventListeners(),this.svg.addEventListener("mousedown",t=>this.handleSvgMouseDown(t)),this.svg.addEventListener("mousemove",t=>this.handleSvgMouseMove(t)),this.svg.addEventListener("mouseup",()=>this.handleSvgMouseUp()),this.svg.addEventListener("dblclick",t=>this.handleSvgDoubleClick(t)),this.svg.addEventListener("wheel",t=>this.handleWheel(t)),this.svg.addEventListener("touchstart",t=>this.handleTouchStart(t),{passive:!1}),this.svg.addEventListener("touchmove",t=>this.handleTouchMove(t),{passive:!1}),this.svg.addEventListener("touchend",t=>this.handleTouchEnd(t),{passive:!1}),this.svg.addEventListener("touchcancel",t=>this.handleTouchEnd(t),{passive:!1}),window.addEventListener("resize",()=>this.handleResize()))}setupNodeEventListeners(){if(!this.nodes||!this.callbacks.getNodeElements)return;const t=this.callbacks.getNodeElements();this.nodes.forEach(e=>{const i=t.get(e);i&&(i.group.addEventListener("mousedown",t=>{this.handleNodeMouseDown(t,e)}),i.group.addEventListener("dblclick",t=>{this.handleNodeDoubleClick(t,e)}),i.group.addEventListener("touchstart",t=>{this.handleNodeTouchStart(t,e)}))})}handleNodeMouseDown(t,e){t.preventDefault(),this.interactionState.isDragging=!0,this.interactionState.dragNode=e,this.interactionState.wasNodeFixed=e.isFixed,this.callbacks.fixNode?.(e),this.emit("nodeMouseDown",{node:e,event:t,position:{x:t.clientX,y:t.clientY}})}handleNodeDoubleClick(t,e){t.preventDefault(),t.stopPropagation(),this.callbacks.filterByNode?.(e.getId()),this.emit("nodeDoubleClick",{node:e,event:t,position:{x:t.clientX,y:t.clientY}})}handleSvgMouseDown(t){this.interactionState.isDragging||(this.callbacks.closeSettings?.(),this.interactionState.isPanning=!0,this.interactionState.lastMouseX=t.clientX,this.interactionState.lastMouseY=t.clientY)}handleSvgDoubleClick(t){t.preventDefault(),this.callbacks.resetFilter?.(),this.emit("backgroundDoubleClick",{event:t,position:{x:t.clientX,y:t.clientY}})}handleSvgMouseMove(t){this.interactionState.isDragging&&this.interactionState.dragNode?this.handleNodeDrag(t):this.interactionState.isPanning&&this.handlePan(t)}handleNodeDrag(t){if(!this.svg||!this.interactionState.dragNode)return;const e=this.svg.getBoundingClientRect(),s=(t.clientX-e.left-this.transformState.x)/this.transformState.scale,n=(t.clientY-e.top-this.transformState.y)/this.transformState.scale,o=this.interactionState.dragNode.position.clone();this.interactionState.dragNode.position.x=s,this.interactionState.dragNode.position.y=n,this.callbacks.showTooltip?.(this.interactionState.dragNode,{x:t.clientX+10,y:t.clientY+10}),this.emit("nodeDrag",{node:this.interactionState.dragNode,position:{x:s,y:n},startPosition:this.interactionState.dragStartPosition||{x:o.x,y:o.y},delta:new i(s-o.x,n-o.y)})}handlePan(t){const e=t.clientX-this.interactionState.lastMouseX,i=t.clientY-this.interactionState.lastMouseY;this.transformState.x+=e,this.transformState.y+=i,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.interactionState.lastMouseX=t.clientX,this.interactionState.lastMouseY=t.clientY,this.emit("pan",{x:this.transformState.x,y:this.transformState.y,deltaX:e,deltaY:i})}handleSvgMouseUp(){this.interactionState.isDragging&&this.interactionState.dragNode&&(this.interactionState.wasNodeFixed||this.callbacks.unfixNode?.(this.interactionState.dragNode)),this.interactionState.isDragging=!1,this.interactionState.dragNode=null,this.interactionState.isPanning=!1,this.interactionState.wasNodeFixed=!1,this.interactionState.dragStartPosition=null,this.callbacks.hideTooltip?.()}handleWheel(t){if(t.preventDefault(),!this.svg)return;const e=this.svg.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top,n=t.deltaY>0?1/this.config.zoomSensitivity:this.config.zoomSensitivity,o=Math.max(.2,Math.min(2,this.transformState.scale*n)),a=o/this.transformState.scale;this.transformState.x=i-(i-this.transformState.x)*a,this.transformState.y=s-(s-this.transformState.y)*a,this.transformState.scale=o,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.emit("zoom",{scale:this.transformState.scale,x:this.transformState.x,y:this.transformState.y,delta:n,center:{x:i,y:s}})}handleTouchStart(t){t.preventDefault(),this.interactionState.touchStartTime=Date.now();const e=t.touches;if(1===e.length){const t=e[0];this.interactionState.lastTouchX=t.clientX,this.interactionState.lastTouchY=t.clientY;const i=document.elementFromPoint(t.clientX,t.clientY),s=i?.closest("g[data-id]");if(s){const t=s.getAttribute("data-id"),e=this.nodes?.get(t||"");e&&(this.interactionState.touchTarget={type:"node",node:e,element:s})}else this.callbacks.closeSettings?.(),this.interactionState.touchTarget={type:"background"},this.interactionState.isPanning=!0}else if(2===e.length){this.interactionState.isPinching=!0,this.interactionState.isPanning=!1;const t=e[0],i=e[1];this.interactionState.lastPinchDistance=Math.sqrt(Math.pow(i.clientX-t.clientX,2)+Math.pow(i.clientY-t.clientY,2)),this.interactionState.lastPinchCenterX=(t.clientX+i.clientX)/2,this.interactionState.lastPinchCenterY=(t.clientY+i.clientY)/2}}handleNodeTouchStart(t,e){t.preventDefault(),t.touches.length>1||(this.interactionState.isDragging=!0,this.interactionState.dragNode=e,this.interactionState.wasNodeFixed=e.isFixed,this.callbacks.fixNode?.(e),this.interactionState.dragStartPosition={x:e.position.x,y:e.position.y})}handleTouchMove(t){t.preventDefault();const e=t.touches;1===e.length&&this.interactionState.isDragging&&this.interactionState.dragNode?this.handleTouchNodeDrag(e[0]):1===e.length&&this.interactionState.isPanning?this.handleTouchPan(e[0]):2===e.length&&this.interactionState.isPinching&&this.handleTouchPinch(e)}handleTouchNodeDrag(t){if(!this.svg||!this.interactionState.dragNode)return;const e=this.svg.getBoundingClientRect(),s=(t.clientX-e.left-this.transformState.x)/this.transformState.scale,n=(t.clientY-e.top-this.transformState.y)/this.transformState.scale,o=this.interactionState.dragNode.position.clone();this.interactionState.dragNode.position.x=s,this.interactionState.dragNode.position.y=n,this.callbacks.showTooltip?.(this.interactionState.dragNode,{x:t.clientX+10,y:t.clientY+10}),this.emit("nodeDrag",{node:this.interactionState.dragNode,position:{x:s,y:n},startPosition:this.interactionState.dragStartPosition||{x:o.x,y:o.y},delta:new i(s-o.x,n-o.y)})}handleTouchPan(t){const e=t.clientX-this.interactionState.lastTouchX,i=t.clientY-this.interactionState.lastTouchY;this.transformState.x+=e,this.transformState.y+=i,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.interactionState.lastTouchX=t.clientX,this.interactionState.lastTouchY=t.clientY,this.emit("pan",{x:this.transformState.x,y:this.transformState.y,deltaX:e,deltaY:i})}handleTouchPinch(t){if(!this.svg)return;const e=t[0],i=t[1],s=Math.sqrt(Math.pow(i.clientX-e.clientX,2)+Math.pow(i.clientY-e.clientY,2)),n=(e.clientX+i.clientX)/2,o=(e.clientY+i.clientY)/2;if(this.interactionState.lastPinchDistance>0){const t=s/this.interactionState.lastPinchDistance,e=Math.max(.2,Math.min(2,this.transformState.scale*t)),i=this.svg.getBoundingClientRect(),a=n-i.left,r=o-i.top,h=e/this.transformState.scale;this.transformState.x=a-(a-this.transformState.x)*h,this.transformState.y=r-(r-this.transformState.y)*h,this.transformState.scale=e,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.emit("zoom",{scale:this.transformState.scale,x:this.transformState.x,y:this.transformState.y,delta:t,center:{x:a,y:r}})}this.interactionState.lastPinchDistance=s,this.interactionState.lastPinchCenterX=n,this.interactionState.lastPinchCenterY=o}handleTouchEnd(t){const e=Date.now();e-this.interactionState.touchStartTime<300&&e-this.interactionState.lastTouchEndTime<500&&this.handleDoubleTap(),this.interactionState.lastTouchEndTime=e,0===t.touches.length?(this.interactionState.isDragging&&this.interactionState.dragNode&&(this.interactionState.wasNodeFixed||this.callbacks.unfixNode?.(this.interactionState.dragNode)),this.interactionState.isDragging=!1,this.interactionState.dragNode=null,this.interactionState.dragStartPosition=null,this.interactionState.isPanning=!1,this.interactionState.isPinching=!1,this.interactionState.wasNodeFixed=!1,this.interactionState.touchTarget=null,this.callbacks.hideTooltip?.()):1===t.touches.length&&(this.interactionState.isPinching=!1,this.interactionState.lastPinchDistance=0)}handleDoubleTap(){"node"===this.interactionState.touchTarget?.type?(this.callbacks.filterByNode?.(this.interactionState.touchTarget.node.getId()),this.emit("nodeDoubleClick",{node:this.interactionState.touchTarget.node})):(this.callbacks.resetFilter?.(),this.emit("backgroundDoubleClick",{}))}handleResize(){this.callbacks.resize?.(),this.emit("resize",{})}setTransform(t,e,i){this.transformState.x=t,this.transformState.y=e,this.transformState.scale=i}getTransform(){return{...this.transformState}}updateConfig(t){Object.assign(this.config,t)}getConfig(){return{...this.config}}on(t,e){this.eventCallbacks.has(t)||this.eventCallbacks.set(t,[]),this.eventCallbacks.get(t).push(e)}off(t,e){if(this.eventCallbacks.has(t)){const i=this.eventCallbacks.get(t),s=i.indexOf(e);-1!==s&&i.splice(s,1)}}removeAllListeners(t){this.eventCallbacks.delete(t)}emit(t,e={}){this.eventCallbacks.has(t)&&this.eventCallbacks.get(t).forEach(i=>{try{i(e)}catch(e){console.error(`Error in event callback for '${t}':`,e)}})}getRegisteredEvents(){return Array.from(this.eventCallbacks.keys())}isDragging(){return this.interactionState.isDragging}isPanning(){return this.interactionState.isPanning}isPinching(){return this.interactionState.isPinching}getDraggedNode(){return this.interactionState.dragNode}stopAllInteractions(){this.interactionState.isDragging&&this.interactionState.dragNode&&(this.interactionState.wasNodeFixed||this.callbacks.unfixNode?.(this.interactionState.dragNode)),this.interactionState.isDragging=!1,this.interactionState.dragNode=null,this.interactionState.isPanning=!1,this.interactionState.isPinching=!1,this.interactionState.wasNodeFixed=!1,this.interactionState.touchTarget=null,this.interactionState.dragStartPosition=null,this.callbacks.hideTooltip?.()}zoomTo(t,e,i,s=!1){if(!this.svg)return;const n=Math.max(.2,Math.min(2,t));if(void 0!==e&&void 0!==i){const t=this.svg.getBoundingClientRect(),s=e-t.left,o=i-t.top,a=n/this.transformState.scale;this.transformState.x=s-(s-this.transformState.x)*a,this.transformState.y=o-(o-this.transformState.y)*a}this.transformState.scale=n,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.emit("zoom",{scale:this.transformState.scale,x:this.transformState.x,y:this.transformState.y,center:e&&i?{x:e,y:i}:void 0})}panTo(t,e,i=!1){const s=t-this.transformState.x,n=e-this.transformState.y;this.transformState.x=t,this.transformState.y=e,this.callbacks.updateTransform?.(this.transformState.x,this.transformState.y,this.transformState.scale),this.emit("pan",{x:this.transformState.x,y:this.transformState.y,deltaX:s,deltaY:n})}screenToSVG(t,e){if(!this.svg)return new i(t,e);const s=this.svg.getBoundingClientRect(),n=(t-s.left-this.transformState.x)/this.transformState.scale,o=(e-s.top-this.transformState.y)/this.transformState.scale;return new i(n,o)}svgToScreen(t,e){if(!this.svg)return new i(t,e);const s=this.svg.getBoundingClientRect(),n=t*this.transformState.scale+this.transformState.x+s.left,o=e*this.transformState.scale+this.transformState.y+s.top;return new i(n,o)}updateCallbacks(t){this.callbacks={...this.callbacks,...t}}toObject(){return{config:this.config,transformState:this.transformState,interactionState:{isDragging:this.interactionState.isDragging,isPanning:this.interactionState.isPanning,isPinching:this.interactionState.isPinching,dragNodeId:this.interactionState.dragNode?.getId()||null},registeredEvents:this.getRegisteredEvents(),type:"EventManager",version:"2.0.0"}}destroy(){window.removeEventListener("resize",()=>this.handleResize()),this.eventCallbacks.clear(),this.stopAllInteractions(),this.svg=null,this.nodes=null,this.callbacks={}}toString(){return`EventManager(events: ${this.getRegisteredEvents().length}, scale: ${this.transformState.scale.toFixed(2)})`}}function h(t){return t&&"object"==typeof t&&"string"==typeof t.id&&"string"==typeof t.name}function l(t){return t&&"object"==typeof t&&"string"==typeof t.source&&"string"==typeof t.target}function d(t){return t&&"object"==typeof t&&Array.isArray(t.nodes)&&Array.isArray(t.links)&&t.nodes.every(h)&&t.links.every(l)}const c={damping:.95,repulsionStrength:6500,attractionStrength:.001,groupingStrength:.001,zoomSensitivity:1.01,filterDepth:1,showControls:!0,showLegend:!0,showTitle:!0,showBreadcrumbs:!0,theme:"dark",title:"Graph Network"};class g extends Error{constructor(t,e,i){super(t),this.name=this.constructor.name,this.code=e,this.details=i,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}class u extends g{constructor(t,e){super(t,"NODE_VALIDATION_ERROR",{nodeData:e})}}class p extends g{constructor(t){super(`Node with id "${t}" already exists`,"NODE_EXISTS_ERROR",{nodeId:t})}}class m extends g{constructor(t){super(`Node with id "${t}" not found`,"NODE_NOT_FOUND_ERROR",{nodeId:t})}}class f extends g{constructor(t,e){super(t,"EDGE_VALIDATION_ERROR",{edgeData:e})}}class y extends g{constructor(t){super(`Edge with id "${t}" already exists`,"EDGE_EXISTS_ERROR",{edgeId:t})}}class w extends g{constructor(t){super(`Edge with id "${t}" not found`,"EDGE_NOT_FOUND_ERROR",{edgeId:t})}}class S extends g{constructor(t,e,i){super(`Edge references non-existent nodes: ${i.join(", ")}`,"INVALID_EDGE_REFERENCES_ERROR",{sourceId:t,targetId:e,missingNodeIds:i})}}class E{static isGraphError(t){return t instanceof g}static getErrorDetails(t){return this.isGraphError(t)?{name:t.name,code:t.code,message:t.message,details:t.details}:t instanceof Error?{name:t.name,message:t.message}:{error:String(t)}}static getUserMessage(t){if(this.isGraphError(t))switch(t.code){case"NODE_VALIDATION_ERROR":case"EDGE_VALIDATION_ERROR":return"Invalid data provided. Please check the required fields.";case"NODE_EXISTS_ERROR":case"EDGE_EXISTS_ERROR":return"Item already exists in the graph.";case"NODE_NOT_FOUND_ERROR":case"EDGE_NOT_FOUND_ERROR":return"Item not found in the graph.";case"INVALID_EDGE_REFERENCES_ERROR":return"Cannot create connection to non-existent nodes.";default:return t.message}return"An unexpected error occurred."}}const b={additive:!1,highlightColor:"#3b82f6",strokeWidth:3,silent:!1,animationDuration:200};class k{constructor(t,e){this.state={selectedNodes:new Set,selectedEdges:new Set,mode:"multi"},this.onSelectionChange=t,this.options={...b,...e}}selectNode(t,e){if(!t)return!1;const i={...this.options,...e},s=this.state.selectedNodes.has(t);return i.additive||"single"!==this.state.mode||this.state.selectedNodes.clear(),this.state.selectedNodes.add(t),this.state.lastSelected=t,!s&&(this.emitSelectionChange(i,[t],[],[],[]),!0)}selectNodes(t,e){const i={...this.options,...e},s=[];i.additive||this.state.selectedNodes.clear();for(const e of t)this.state.selectedNodes.has(e)||(this.state.selectedNodes.add(e),s.push(e));return s.length>0&&(this.state.lastSelected=s[s.length-1],this.emitSelectionChange(i,s,[],[],[])),s}selectEdge(t,e){const i={...this.options,...e},s=this.state.selectedEdges.has(t);return i.additive||"single"!==this.state.mode||this.state.selectedEdges.clear(),this.state.selectedEdges.add(t),!s&&(this.emitSelectionChange(i,[],[],[t],[]),!0)}selectEdges(t,e){const i={...this.options,...e},s=[];i.additive||this.state.selectedEdges.clear();for(const e of t)this.state.selectedEdges.has(e)||(this.state.selectedEdges.add(e),s.push(e));return s.length>0&&this.emitSelectionChange(i,[],[],s,[]),s}deselectNode(t){return!!this.state.selectedNodes.has(t)&&(this.state.selectedNodes.delete(t),this.emitSelectionChange(this.options,[],[t],[],[]),!0)}deselectEdge(t){return!!this.state.selectedEdges.has(t)&&(this.state.selectedEdges.delete(t),this.emitSelectionChange(this.options,[],[],[],[t]),!0)}deselectAll(){const t=Array.from(this.state.selectedNodes),e=Array.from(this.state.selectedEdges);this.state.selectedNodes.clear(),this.state.selectedEdges.clear(),this.state.lastSelected=void 0,(t.length>0||e.length>0)&&this.emitSelectionChange(this.options,[],t,[],e)}toggleNodeSelection(t){return this.state.selectedNodes.has(t)?this.deselectNode(t):this.selectNode(t,{additive:!0})}toggleEdgeSelection(t){return this.state.selectedEdges.has(t)?this.deselectEdge(t):this.selectEdge(t,{additive:!0})}isNodeSelected(t){return this.state.selectedNodes.has(t)}isEdgeSelected(t){return this.state.selectedEdges.has(t)}getSelectedNodes(){return Array.from(this.state.selectedNodes)}getSelectedEdges(){return Array.from(this.state.selectedEdges)}getSelectionState(){return{selectedNodes:new Set(this.state.selectedNodes),selectedEdges:new Set(this.state.selectedEdges),lastSelected:this.state.lastSelected,mode:this.state.mode}}clearSelection(){this.deselectAll()}setSelectionMode(t){if(this.state.mode=t,"single"===t){if(this.state.selectedNodes.size>1){const t=this.state.lastSelected,e=Array.from(this.state.selectedNodes).filter(e=>e!==t);this.state.selectedNodes.clear(),t&&this.state.selectedNodes.add(t),e.length>0&&this.emitSelectionChange(this.options,[],e,[],[])}if(this.state.selectedEdges.size>0){const t=Array.from(this.state.selectedEdges);this.state.selectedEdges.clear(),this.emitSelectionChange(this.options,[],[],[],t)}}}getSelectionMode(){return this.state.mode}hasSelection(){return this.state.selectedNodes.size>0||this.state.selectedEdges.size>0}getSelectionCount(){const t=this.state.selectedNodes.size,e=this.state.selectedEdges.size;return{nodes:t,edges:e,total:t+e}}updateAfterDataChange(t,e){const i=[],s=[];for(const e of this.state.selectedNodes)t.has(e)||(this.state.selectedNodes.delete(e),i.push(e));for(const t of this.state.selectedEdges)e.has(t)||(this.state.selectedEdges.delete(t),s.push(t));this.state.lastSelected&&!t.has(this.state.lastSelected)&&(this.state.lastSelected=void 0),(i.length>0||s.length>0)&&this.emitSelectionChange(this.options,[],i,[],s)}emitSelectionChange(t,e,i,s,n){if(t.silent||!this.onSelectionChange)return;const o={type:"selectionChanged",selectedNodes:Array.from(this.state.selectedNodes),selectedEdges:Array.from(this.state.selectedEdges),addedNodes:e,removedNodes:i,addedEdges:s,removedEdges:n,timestamp:Date.now()};"undefined"!=typeof setTimeout?setTimeout(()=>this.onSelectionChange(o),0):this.onSelectionChange(o)}}class v{constructor(t){this.nodeStyles=new Map,this.edgeStyles=new Map,this.nodeStates=new Map,this.edgeStates=new Map,this.cssRuleIndex=0,this.onStyleChange=t,this.initializeStyleSheet()}setNodeStyle(t,e){const i=this.getOrCreateNodeStyle(t);i.base={...i.base,...e},this.updateComputedStyle(t,"node"),this.applyStyleToElement(t,"node"),this.emitStyleChange([t],"node",e)}setEdgeStyle(t,e){const i=this.getOrCreateEdgeStyle(t);i.base={...i.base,...e},this.updateComputedStyle(t,"edge"),this.applyStyleToElement(t,"edge"),this.emitStyleChange([t],"edge",e)}setNodeState(t,e){(this.nodeStates.get(t)||"normal")!==e&&(this.nodeStates.set(t,e),this.updateComputedStyle(t,"node"),this.applyStyleToElement(t,"node"),this.updateElementClass(t,"node",e))}setEdgeState(t,e){(this.edgeStates.get(t)||"normal")!==e&&(this.edgeStates.set(t,e),this.updateComputedStyle(t,"edge"),this.applyStyleToElement(t,"edge"),this.updateElementClass(t,"edge",e))}updateStyles(t,e){const i=this.resolveElementSelector(t),s=[];for(const{id:t,type:n}of i)"node"===n?this.setNodeStyle(t,e):this.setEdgeStyle(t,e),s.push(t);s.length>0&&this.emitStyleChange(s,i[0]?.type||"node",e)}resetStyle(t){if(!t)return this.nodeStyles.clear(),this.edgeStyles.clear(),this.nodeStates.clear(),this.edgeStates.clear(),void this.clearAllDynamicStyles();const e=this.resolveElementSelector(t);for(const{id:t,type:i}of e)"node"===i?(this.nodeStyles.delete(t),this.nodeStates.set(t,"normal")):(this.edgeStyles.delete(t),this.edgeStates.set(t,"normal")),this.clearElementStyle(t,i)}getNodeStyle(t){const e=this.nodeStyles.get(t);return e?{...e.computed}:null}getEdgeStyle(t){const e=this.edgeStyles.get(t);return e?{...e.computed}:null}getNodeState(t){return this.nodeStates.get(t)||"normal"}getEdgeState(t){return this.edgeStates.get(t)||"normal"}clearStyles(){this.resetStyle()}registerElement(t,e,i){"node"===e?this.getOrCreateNodeStyle(t).element=i:this.getOrCreateEdgeStyle(t).element=i}unregisterElement(t,e){if("node"===e){const e=this.nodeStyles.get(t);e&&(e.element=void 0)}else{const e=this.edgeStyles.get(t);e&&(e.element=void 0)}}applyTheme(t){const e=this.getThemeStyles(t);this.nodeStyles.forEach((t,i)=>{t.element&&(Object.assign(t.base,e.node),this.updateComputedStyle(i,"node"),this.applyStyleToElement(i,"node"))}),this.edgeStyles.forEach((t,i)=>{t.element&&(Object.assign(t.base,e.edge),this.updateComputedStyle(i,"edge"),this.applyStyleToElement(i,"edge"))})}getOrCreateNodeStyle(t){return this.nodeStyles.has(t)||this.nodeStyles.set(t,{base:{},state:{},computed:{}}),this.nodeStyles.get(t)}getOrCreateEdgeStyle(t){return this.edgeStyles.has(t)||this.edgeStyles.set(t,{base:{},state:{},computed:{}}),this.edgeStyles.get(t)}updateComputedStyle(t,e){const i="node"===e?this.nodeStyles.get(t):this.edgeStyles.get(t);if(!i)return;const s="node"===e?this.getNodeState(t):this.getEdgeState(t);i.computed={...i.base,...i.state[s]||{}}}applyStyleToElement(t,e){const i="node"===e?this.nodeStyles.get(t):this.edgeStyles.get(t);if(!i?.element)return;const s=i.element,n=i.computed;n.fill&&s.setAttribute("fill",n.fill),n.stroke&&s.setAttribute("stroke",n.stroke),void 0!==n.strokeWidth&&s.setAttribute("stroke-width",String(n.strokeWidth)),void 0!==n.opacity&&s.setAttribute("opacity",String(n.opacity)),n.strokeDasharray&&s.setAttribute("stroke-dasharray",n.strokeDasharray),n.filter&&s.setAttribute("filter",n.filter),"node"===e&&void 0!==n.size&&("circle"===s.tagName?s.setAttribute("r",String(n.size/2)):"rect"===s.tagName&&(s.setAttribute("width",String(n.size)),s.setAttribute("height",String(n.size)),s.setAttribute("x",String(-n.size/2)),s.setAttribute("y",String(-n.size/2)))),"edge"===e&&n.markerEnd&&s.setAttribute("marker-end",n.markerEnd),n.className&&s.setAttribute("class",n.className)}updateElementClass(t,e,i){const s="node"===e?this.nodeStyles.get(t):this.edgeStyles.get(t);if(!s?.element)return;const n=s.element,o="node"===e?"graph-node":"graph-edge",a=`${o}--${i}`;n.className.baseVal=n.className.baseVal.replace(/\bgraph-(node|edge)--\w+\b/g,"").trim(),n.classList.add(o,a),s.computed.className&&n.classList.add(s.computed.className)}resolveElementSelector(t){const e=[];if("string"==typeof t)"all"===t?(this.nodeStyles.forEach((t,i)=>e.push({id:i,type:"node"})),this.edgeStyles.forEach((t,i)=>e.push({id:i,type:"edge"}))):"selected"===t||"highlighted"===t||(this.nodeStyles.has(t)&&e.push({id:t,type:"node"}),this.edgeStyles.has(t)&&e.push({id:t,type:"edge"}));else if(Array.isArray(t))for(const i of t)this.nodeStyles.has(i)&&e.push({id:i,type:"node"}),this.edgeStyles.has(i)&&e.push({id:i,type:"edge"});return e}initializeStyleSheet(){const t=document.createElement("style");t.id="graph-dynamic-styles",document.head.appendChild(t),this.styleSheet=t.sheet}clearAllDynamicStyles(){if(this.styleSheet){for(;this.styleSheet.cssRules.length>0;)this.styleSheet.deleteRule(0);this.cssRuleIndex=0}}clearElementStyle(t,e){const i="node"===e?this.nodeStyles.get(t):this.edgeStyles.get(t);if(!i?.element)return;const s=i.element;["fill","stroke","stroke-width","opacity","stroke-dasharray","filter","marker-end"].forEach(t=>{s.removeAttribute(t)});const n="node"===e?"graph-node":"graph-edge";s.className.baseVal=n}getThemeStyles(t){return"dark"===t?{node:{fill:"#64748b",stroke:"#94a3b8",strokeWidth:1},edge:{stroke:"#475569",strokeWidth:1}}:{node:{fill:"#e2e8f0",stroke:"#64748b",strokeWidth:1},edge:{stroke:"#94a3b8",strokeWidth:1}}}emitStyleChange(t,e,i){if(!this.onStyleChange)return;const s={type:"styleChanged",elements:t,elementType:e,styles:i,timestamp:Date.now()};"undefined"!=typeof setTimeout?setTimeout(()=>this.onStyleChange(s),0):this.onStyleChange(s)}}class N{constructor(t){this.animationCounter=0,this.state={nodes:new Map,edges:new Map,paths:new Map,animations:new Map},this.onHighlightChange=t}highlightNode(t,e={}){const i=this.mergeWithDefaults(e);this.state.nodes.set(t,i),this.applyHighlightToElement(t,"node",i),this.emitHighlightChange()}highlightNodes(t,e={}){const i=this.mergeWithDefaults(e);for(const e of t)this.state.nodes.set(e,i),this.applyHighlightToElement(e,"node",i);this.emitHighlightChange()}highlightEdge(t,e={}){const i=this.mergeWithDefaults(e);this.state.edges.set(t,i),this.applyHighlightToElement(t,"edge",i),this.emitHighlightChange()}highlightEdges(t,e={}){const i=this.mergeWithDefaults(e);for(const e of t)this.state.edges.set(e,i),this.applyHighlightToElement(e,"edge",i);this.emitHighlightChange()}highlightPath(t,e,i={}){if(!this.graphAdjacency)return console.warn("HighlightManager: Graph adjacency not initialized. Call updateGraphStructure() first."),null;const s=this.findShortestPath(t,e);if(!s||0===s.length)return null;const n=`path_${t}_${e}`,o=[],a=this.mergeWithDefaults({color:i.pathColor||i.color||"#ff6b35",strokeWidth:i.strokeWidth||3,animated:i.showFlow||!1,duration:i.duration||1e3,zIndex:i.zIndex||100});for(let t=0;t<s.length;t++){const e=s[t];if(this.state.nodes.set(e,a),this.applyHighlightToElement(e,"node",a),o.push(e),t<s.length-1){const e=this.findEdgeBetweenNodes(s[t],s[t+1]);if(e){const t=this.mergeWithDefaults({color:i.pathColor||i.color||"#ff6b35",strokeWidth:(i.pathWidth||i.strokeWidth||3)+1,animated:i.showFlow||!1,duration:i.duration||1e3,zIndex:i.zIndex||100});this.state.edges.set(e,t),this.applyHighlightToElement(e,"edge",t),o.push(e)}}}return this.state.paths.set(n,o),i.showFlow&&this.animatePathFlow(o,i),this.emitHighlightChange(),o}highlightNeighbors(t,e={}){if(!this.graphAdjacency)return console.warn("HighlightManager: Graph adjacency not initialized. Call updateGraphStructure() first."),[];const i=e.depth||1,s=[],n=new Set,o=[{nodeId:t,currentDepth:0}],a=this.mergeWithDefaults({color:e.color||"#3b82f6",strokeWidth:e.strokeWidth||3,opacity:e.opacity||.8,zIndex:e.zIndex||50});for(this.state.nodes.set(t,a),this.applyHighlightToElement(t,"node",a),s.push(t),n.add(t);o.length>0;){const{nodeId:t,currentDepth:a}=o.shift();if(a>=i)continue;const r=this.graphAdjacency.adjacency.get(t)||new Set;for(const h of r){if(n.has(h))continue;n.add(h);const r=(a+1)/i,l=this.getDepthBasedStyle(e,a+1,r);if(this.state.nodes.set(h,l),this.applyHighlightToElement(h,"node",l),s.push(h),e.highlightEdges){const e=this.findEdgeBetweenNodes(t,h);if(e){const t=this.mergeWithDefaults({color:l.color,strokeWidth:(l.strokeWidth||2)-1,opacity:.7*(l.opacity||.8),zIndex:(l.zIndex||50)-10});this.state.edges.set(e,t),this.applyHighlightToElement(e,"edge",t),s.push(e)}}o.push({nodeId:h,currentDepth:a+1})}}return this.emitHighlightChange(),s}highlightConnections(t,e={}){if(!this.graphAdjacency)return console.warn("HighlightManager: Graph adjacency not initialized. Call updateGraphStructure() first."),[];const i=this.graphAdjacency.nodeToEdges.get(t)||[],s=this.mergeWithDefaults(e);this.state.nodes.set(t,s),this.applyHighlightToElement(t,"node",s);for(const t of i)this.state.edges.set(t,s),this.applyHighlightToElement(t,"edge",s);return this.emitHighlightChange(),[t,...i]}clearHighlights(){for(const t of this.state.nodes.keys())this.clearElementHighlight(t,"node");for(const t of this.state.edges.keys())this.clearElementHighlight(t,"edge");for(const t of this.state.animations.values())cancelAnimationFrame(t);this.state.nodes.clear(),this.state.edges.clear(),this.state.paths.clear(),this.state.animations.clear(),this.emitHighlightChange()}clearNodeHighlight(t){this.state.nodes.has(t)&&(this.state.nodes.delete(t),this.clearElementHighlight(t,"node"),this.emitHighlightChange())}clearEdgeHighlight(t){this.state.edges.has(t)&&(this.state.edges.delete(t),this.clearElementHighlight(t,"edge"),this.emitHighlightChange())}isNodeHighlighted(t){return this.state.nodes.has(t)}isEdgeHighlighted(t){return this.state.edges.has(t)}getHighlightedNodes(){return Array.from(this.state.nodes.keys())}getHighlightedEdges(){return Array.from(this.state.edges.keys())}updateGraphStructure(t,e){this.graphAdjacency={nodeToEdges:new Map,edgeToNodes:new Map,adjacency:new Map};for(const e of t)this.graphAdjacency.nodeToEdges.set(e,[]),this.graphAdjacency.adjacency.set(e,new Set);for(const t of e){const{id:e,source:i,target:s}=t;this.graphAdjacency.edgeToNodes.set(e,[i,s]),this.graphAdjacency.nodeToEdges.get(i)?.push(e),this.graphAdjacency.nodeToEdges.get(s)?.push(e),this.graphAdjacency.adjacency.get(i)?.add(s),this.graphAdjacency.adjacency.get(s)?.add(i)}}findShortestPath(t,e){if(!this.graphAdjacency||t===e)return null;const i=new Set,s=[t],n=new Map;for(i.add(t);s.length>0;){const t=s.shift();if(t===e){const t=[];let i=e;for(;void 0!==i;)t.unshift(i),i=n.get(i);return t}const o=this.graphAdjacency.adjacency.get(t)||new Set;for(const e of o)i.has(e)||(i.add(e),n.set(e,t),s.push(e))}return null}findEdgeBetweenNodes(t,e){if(!this.graphAdjacency)return null;const i=this.graphAdjacency.nodeToEdges.get(t)||[];for(const s of i){const i=this.graphAdjacency.edgeToNodes.get(s);if(i&&(i[0]===t&&i[1]===e||i[0]===e&&i[1]===t))return s}return null}getDepthBasedStyle(t,e,i){const s=t.color||"#3b82f6",n=t.depthColors||[];let o=s;n.length>0&&e-1<n.length&&(o=n[e-1]);let a=t.opacity||.8;return t.fadeByDistance&&(a*=1-.5*i),this.mergeWithDefaults({color:o,opacity:a,strokeWidth:Math.max(1,(t.strokeWidth||3)-e),zIndex:Math.max(1,(t.zIndex||50)-10*e)})}animatePathFlow(t,e){const i=e.duration||1e3,s=e.flowSpeed||1;(()=>{const e=this.animationCounter++,n=Date.now(),o=()=>{const a=Date.now()-n,r=a/i%1;t.forEach((t,e)=>{if(this.state.edges.has(t)){const e=document.getElementById(`edge-${t}`);if(e){const t=20*r*s;e.style.strokeDashoffset=`${t}px`}}}),a<i&&this.state.animations.set(`flow_${e}`,requestAnimationFrame(o))};requestAnimationFrame(o)})()}applyHighlightToElement(t,e,i){const s=document.getElementById(`${e}-${t}`);s&&(i.color&&("node"===e&&s.setAttribute("fill",i.color),s.setAttribute("stroke",i.color)),i.strokeWidth&&s.setAttribute("stroke-width",String(i.strokeWidth)),void 0!==i.opacity&&s.setAttribute("opacity",String(i.opacity)),i.animated&&s.classList.add("graph-highlight-animated"),i.glow&&s.classList.add("graph-highlight-glow"),i.pulse&&s.classList.add("graph-highlight-pulse"),void 0!==i.zIndex&&s.style.setProperty("--highlight-z-index",String(i.zIndex)))}clearElementHighlight(t,e){const i=document.getElementById(`${e}-${t}`);i&&(i.classList.remove("graph-highlight-animated","graph-highlight-glow","graph-highlight-pulse"),i.style.removeProperty("--highlight-z-index"),i.style.strokeDashoffset="")}mergeWithDefaults(t){return{color:"#3b82f6",strokeWidth:2,opacity:1,animated:!1,glow:!1,pulse:!1,duration:300,zIndex:10,...t}}emitHighlightChange(){if(!this.onHighlightChange)return;const t={type:"highlightChanged",highlightedNodes:this.getHighlightedNodes(),highlightedEdges:this.getHighlightedEdges(),style:{},timestamp:Date.now()};"undefined"!=typeof setTimeout?setTimeout(()=>this.onHighlightChange(t),0):this.onHighlightChange(t)}}const C={linear:t=>t,ease:t=>t<.5?2*t*t:(4-2*t)*t-1,"ease-in":t=>t*t,"ease-out":t=>t*(2-t),"ease-in-out":t=>t<.5?2*t*t:(4-2*t)*t-1,"cubic-bezier":t=>t*t*(3-2*t)};class x{constructor(t){this.currentTransform={x:0,y:0,scale:1},this.animationState=null,this.nodePositions=new Map,this.viewportSize={width:800,height:600},this.onFocusChange=t}initialize(t,e){this.svgElement=t,this.transformGroup=e,this.updateViewportSize()}async focusOnNode(t,e={}){if(!this.nodePositions.get(t))throw new Error(`Node '${t}' not found`);return this.focusOnNodes([t],e)}async focusOnNodes(t,e={}){if(0===t.length)throw new Error("No nodes provided for focus");const i=t.map(t=>this.nodePositions.get(t)).filter(Boolean);if(0===i.length)throw new Error("None of the provided nodes were found");const s=this.calculateBounds(i),n=this.calculateTargetTransform(s,e);await this.animateToTransform(n,e),this.emitFocusChange(t,n,e)}async fitToView(t=50){if(0===this.nodePositions.size)return;const e=Array.from(this.nodePositions.values()),i=this.calculateBounds(e),s=this.calculateTargetTransform(i,{padding:t,animated:!0});await this.animateToTransform(s,{padding:t,animated:!0})}async centerView(){if(0===this.nodePositions.size)return;const t=Array.from(this.nodePositions.values()),e=this.calculateBounds(t),i=(e.minX+e.maxX)/2,s=(e.minY+e.maxY)/2,n={x:this.viewportSize.width/2-i*this.currentTransform.scale,y:this.viewportSize.height/2-s*this.currentTransform.scale,scale:this.currentTransform.scale};await this.animateToTransform(n,{animated:!0})}getViewBounds(){const t=this.currentTransform.scale,e=-this.currentTransform.x/t,i=-this.currentTransform.y/t,s=this.viewportSize.width/t,n=this.viewportSize.height/t;return{minX:e,maxX:e+s,minY:i,maxY:i+n,width:s,height:n,center:{x:e+s/2,y:i+n/2}}}isAnimating(){return this.animationState?.active||!1}stopAnimation(){this.animationState?.active&&(this.animationState.active=!1,this.animationState.onComplete&&this.animationState.onComplete())}async setTransform(t,e,i,s=!1){const n={x:t,y:e,scale:i};s?await this.animateToTransform(n,{animated:!0}):(this.applyTransform(n),this.currentTransform=n)}updateNodePositions(t){this.nodePositions.clear();for(const[e,i]of t.entries())this.nodePositions.set(e,{id:e,x:i.x,y:i.y,size:i.size||20})}updateViewportSize(){if(this.svgElement){const t=this.svgElement.getBoundingClientRect();this.viewportSize={width:t.width||800,height:t.height||600}}}calculateBounds(t){if(0===t.length)return{minX:0,maxX:0,minY:0,maxY:0,width:0,height:0,center:{x:0,y:0}};let e=t[0].x,i=t[0].x,s=t[0].y,n=t[0].y;for(const o of t){const t=(o.size||20)/2;e=Math.min(e,o.x-t),i=Math.max(i,o.x+t),s=Math.min(s,o.y-t),n=Math.max(n,o.y+t)}const o=i-e,a=n-s;return{minX:e,maxX:i,minY:s,maxY:n,width:o,height:a,center:{x:e+o/2,y:s+a/2}}}calculateTargetTransform(t,e){const i=e.padding||50,s=e.offset||{x:0,y:0};let n=e.scale;if(!n){const e=(this.viewportSize.width-2*i)/t.width,s=(this.viewportSize.height-2*i)/t.height;n=Math.min(e,s,2),n=Math.max(n,.1)}const o=t.center.x,a=t.center.y;return{x:this.viewportSize.width/2-o*n+s.x,y:this.viewportSize.height/2-a*n+s.y,scale:n}}async animateToTransform(t,e){if(!e.animated)return this.applyTransform(t),void(this.currentTransform=t);this.stopAnimation();const i=e.duration||800,s=e.easing||"ease-out",n={...this.currentTransform},o=Date.now();return new Promise(e=>{this.animationState={active:!0,startTime:o,duration:i,from:n,to:t,easing:s,onComplete:e};const a=()=>{if(!this.animationState?.active)return void e();const r=Date.now()-o,h=Math.min(r/i,1),l=this.applyEasing(h,s),d={x:this.lerp(n.x,t.x,l),y:this.lerp(n.y,t.y,l),scale:this.lerp(n.scale,t.scale,l)};this.applyTransform(d),this.currentTransform=d,h<1?requestAnimationFrame(a):(this.animationState.active=!1,e())};requestAnimationFrame(a)})}applyTransform(t){if(this.transformGroup){const{x:e,y:i,scale:s}=t;this.transformGroup.setAttribute("transform",`translate(${e}, ${i}) scale(${s})`)}}applyEasing(t,e){const i=C[e];return i?i(t):t}lerp(t,e,i){return t+(e-t)*i}emitFocusChange(t,e,i){if(!this.onFocusChange)return;const s={type:"focusChanged",targetNodes:t,transform:e,options:i,timestamp:Date.now()};"undefined"!=typeof setTimeout?setTimeout(()=>this.onFocusChange(s),0):this.onFocusChange(s)}}var T=class{constructor(t,e={}){this.nodes=new Map,this.links=[],this.edges=new Map,this.filteredNodes=null,this.currentFilterNodeId=null,this.currentTransaction=null,this.transactionIdCounter=0,this.animationFrame=null,this.isAnimating=!1,this.lastFrameTime=0,this.frameCount=0,this.fps=0,this.physics=null,this.renderer=null,this.ui=null,this.events=null,this.selectionManager=null,this.styleManager=null,this.highlightManager=null,this.cameraController=null,this.eventCallbacks={},this.customEventListeners=new Map,this.tooltip=null,this.tooltipConfig={enabled:!0,showPosition:!0,showType:!0},this.startTime=Date.now(),this.containerId=t,this.container=this.findContainer(t),this.debug=e.debug||!1,this.config={...c,...e.config},this.debug&&console.log("GraphNetwork: Initializing with config:",this.config),this.setupContainer(),this.initializeModules(),e.data&&this.setData(e.data),this.startAnimation()}findContainer(t){const e=document.getElementById(t);if(!e)throw new Error(`Container element with id "${t}" not found.`);return e}setupContainer(){this.container.innerHTML="",this.container.classList.add("graph-network-container"),this.container.setAttribute("data-theme",this.config.theme)}initializeModules(){this.physics=new n({damping:this.config.damping,repulsionStrength:this.config.repulsionStrength,attractionStrength:this.config.attractionStrength,groupingStrength:this.config.groupingStrength}),this.debug&&console.log("GraphNetwork: Physics engine initialized"),this.renderer=new a(this.container,this.containerId,{showLabels:!0,debug:this.debug}),this.renderer.initialize(),this.debug&&console.log("GraphNetwork: SVG renderer initialized");const t={onZoomIn:()=>this.zoomIn(),onZoomOut:()=>this.zoomOut(),onResetView:()=>this.resetViewAndLayout(),onToggleTheme:()=>this.toggleTheme(),onConfigChange:(t,e)=>this.updatePhysicsConfig(t,e),onBreadcrumbClick:t=>this.handleBreadcrumbAction(t)};this.ui=new o(this.container,this.config,t),this.ui.initialize(),this.debug&&console.log("GraphNetwork: UI manager initialized"),this.eventCallbacks={getNodeElements:()=>this.renderer?.getNodeElements()||new Map,fixNode:t=>t.fix(),unfixNode:t=>t.unfix(),filterByNode:t=>{this.currentFilterNodeId===t?this.resetFilter():this.filterByNode(t)},resetFilter:()=>this.resetFilter(),updateTransform:(t,e,i)=>this.renderer?.setTransform(t,e,i),showTooltip:(t,e)=>this.showTooltip(t,e),hideTooltip:()=>this.hideTooltip(),closeSettings:()=>this.ui?.closeSettings(),resize:()=>this.handleResize()},this.events=new r(this.config),this.createTooltip(),this.selectionManager=new k(t=>this.emit("selectionChanged",t)),this.styleManager=new v(t=>this.emit("styleChanged",t)),this.highlightManager=new N(t=>this.emit("highlightChanged",t)),this.cameraController=new x(t=>this.emit("focusChanged",t)),this.setTheme(this.config.theme),this.debug&&console.log("GraphNetwork: All modules initialized successfully")}parseData(t){const{nodes:e,links:i}=t;if(!Array.isArray(e)||0===e.length)throw new Error("Data must contain a non-empty nodes array");const n=this.container.getBoundingClientRect(),o=n.width||800,a=n.height||600;if(this.debug&&console.log(`GraphNetwork: Container dimensions: ${o}x${a}`),e.forEach((t,e)=>{if(!h(t))throw new Error(`Invalid node data at index ${e}. Must have id and name properties.`);const i=new s(t,o,a);this.debug&&e<5&&console.log(`GraphNetwork: Node ${t.name} created at position: (${i.position.x.toFixed(2)}, ${i.position.y.toFixed(2)})`),this.nodes.set(t.id,i)}),!Array.isArray(i))throw new Error("Data must contain a links array");i.forEach((t,e)=>{if(!l(t))throw new Error(`Invalid link data at index ${e}. Must have source and target properties.`);const i=this.nodes.get(t.source),s=this.nodes.get(t.target);if(!i||!s)throw new Error(`Link references non-existent node: ${t.source} -> ${t.target}`);this.links.push({source:i,target:s,label:t.label||"",weight:t.weight||1,line_type:t.line_type||"solid"});const n=t.id||`${t.source}-${t.target}`;this.edges.set(n,{id:n,...t})}),this.debug&&console.log(`GraphNetwork: Successfully parsed ${this.nodes.size} nodes and ${this.links.length} links`)}updatePhysicsConfig(t,e){this.config[t]=e,this.debug&&console.log(`GraphNetwork: Updated config ${t} = ${e}`),"filterDepth"===t?this.currentFilterNodeId&&this.filterByNode(this.currentFilterNodeId,e):this.physics?.updateConfig({[t]:e})}startAnimation(){this.isAnimating||(this.isAnimating=!0,this.lastFrameTime=performance.now(),this.frameCount=0,this.debug&&console.log("GraphNetwork: Animation started"),this.animate())}stopAnimation(){this.isAnimating=!1,this.animationFrame&&(cancelAnimationFrame(this.animationFrame),this.animationFrame=null),this.debug&&console.log("GraphNetwork: Animation stopped")}animate(){if(!this.isAnimating)return;const t=performance.now(),e=t-this.lastFrameTime;if(this.frameCount++,this.frameCount%60==0&&(this.fps=Math.round(1e3/e)),this.physics){if(!this.events?.isPanning()){const t=n.createLinks(this.links.map(t=>({source:t.source.getId(),target:t.target.getId(),weight:t.weight})),this.nodes);this.physics.updateForces(this.nodes,t,this.filteredNodes),this.physics.updatePositions(this.nodes,this.filteredNodes)}this.renderer?.render(this.nodes,this.links,this.filteredNodes),this.lastFrameTime=t,this.animationFrame=requestAnimationFrame(()=>this.animate())}else console.error("GraphNetwork: Physics engine not initialized")}filterByNode(t,e=null){const i=null!==e?e:this.config.filterDepth,s=this.nodes.get(t);if(!s)throw new Error(`Node with id "${t}" does not exist`);const n=new Set,o=[{node:s,currentDepth:0}];for(;o.length>0;){const t=o.shift();if(!t)break;const{node:e,currentDepth:s}=t;n.has(e.getId())||s>i||(n.add(e.getId()),this.links.forEach(t=>{t.source!==e||n.has(t.target.getId())?t.target!==e||n.has(t.source.getId())||o.push({node:t.source,currentDepth:s+1}):o.push({node:t.target,currentDepth:s+1})}))}this.filteredNodes=n,this.currentFilterNodeId=t,this.updateGraphView();const a=[{name:"All Nodes",action:"reset"},{name:s.getName()}];this.ui?.renderBreadcrumbs(a),this.debug&&console.log(`GraphNetwork: Filtered to ${n.size} nodes from node "${s.getName()}" with depth ${i}`),this.emit("filtered",{nodeId:t,depth:i,visibleNodes:Array.from(n),nodeName:s.getName()})}resetFilter(){const t=null!==this.filteredNodes;this.filteredNodes=null,this.currentFilterNodeId=null,this.updateGraphView(),this.ui?.renderBreadcrumbs([{name:"All Nodes"}]),this.debug&&t&&console.log("GraphNetwork: Filter reset - showing all nodes"),this.emit("filterReset",{previousFilterNodeId:this.currentFilterNodeId,totalNodes:this.nodes.size})}updateGraphView(){this.emit("viewUpdated",{filteredNodes:this.filteredNodes?Array.from(this.filteredNodes):null,totalNodes:this.nodes.size,visibleNodes:this.filteredNodes?.size||this.nodes.size})}resetAllNodePositions(){const t=this.container.getBoundingClientRect(),e=t.width||800,i=t.height||600;this.nodes.forEach(t=>{t.resetPosition(e,i)}),this.debug&&console.log(`GraphNetwork: Reset positions for ${this.nodes.size} nodes`)}resetViewAndLayout(){this.resetAllNodePositions(),this.renderer?.setTransform(0,0,1),this.events?.setTransform(0,0,1),this.debug&&console.log("GraphNetwork: View and layout reset"),this.emit("reset",{nodeCount:this.nodes.size,timestamp:Date.now()})}zoomIn(t){const e=this.events?.getTransform()||{x:0,y:0,scale:1},i=t||Math.pow(this.config.zoomSensitivity,10),s=Math.min(2,e.scale*i),n=this.container.getBoundingClientRect(),o=n.width/2,a=n.height/2,r=s/e.scale,h=o-(o-e.x)*r,l=a-(a-e.y)*r;this.renderer?.setTransform(h,l,s),this.events?.setTransform(h,l,s),this.emit("zoom",{scale:s,x:h,y:l,direction:"in",factor:i})}zoomOut(t){const e=this.events?.getTransform()||{x:0,y:0,scale:1},i=t||Math.pow(this.config.zoomSensitivity,10),s=Math.max(.2,e.scale/i),n=this.container.getBoundingClientRect(),o=n.width/2,a=n.height/2,r=s/e.scale,h=o-(o-e.x)*r,l=a-(a-e.y)*r;this.renderer?.setTransform(h,l,s),this.events?.setTransform(h,l,s),this.emit("zoom",{scale:s,x:h,y:l,direction:"out",factor:i})}zoomToFit(t=50){if(!this.renderer||0===this.nodes.size)return;const e=this.renderer.getBounds(this.nodes,this.filteredNodes),i=this.container.getBoundingClientRect();if(0===e.width||0===e.height)return;const s=(i.width-2*t)/e.width,n=(i.height-2*t)/e.height,o=Math.min(Math.max(.2,Math.min(s,n)),2),a=i.width/2,r=i.height/2,h=a-(e.x+e.width/2)*o,l=r-(e.y+e.height/2)*o;this.renderer.setTransform(h,l,o),this.events?.setTransform(h,l,o),this.debug&&console.log(`GraphNetwork: Zoom to fit - scale: ${o.toFixed(2)}, bounds:`,e),this.emit("zoom",{scale:o,x:h,y:l,direction:"fit",bounds:e})}toggleTheme(){const t="light"===this.config.theme?"dark":"light";this.setTheme(t)}setTheme(t){this.config.theme=t,this.container.setAttribute("data-theme",t),this.ui?.updateThemeToggle(t),this.debug&&console.log(`GraphNetwork: Theme changed to ${t}`),this.emit("themeChanged",{theme:t})}handleBreadcrumbAction(t){"reset"===t&&this.resetFilter()}handleResize(){const t=this.container.getBoundingClientRect();this.renderer?.resize(t.width,t.height),this.debug&&console.log(`GraphNetwork: Resized to ${t.width}x${t.height}`),this.emit("resize",{width:t.width,height:t.height})}createTooltip(){this.tooltipConfig.enabled&&(this.tooltip=document.createElement("div"),this.tooltip.className="graph-network-tooltip",this.tooltip.style.display="none",this.tooltip.style.pointerEvents="none",document.body.appendChild(this.tooltip))}showTooltip(t,e=null){if(!this.tooltip||!this.tooltipConfig.enabled)return;let i;if(this.tooltipConfig.formatter)i=this.tooltipConfig.formatter(t);else{const e=[`<strong>${t.getName()}</strong>`];this.tooltipConfig.showType&&t.getType()&&e.push(`Type: ${t.getType()}`),this.tooltipConfig.showPosition&&e.push(`Position: (${Math.round(t.position.x)}, ${Math.round(t.position.y)})`),this.tooltipConfig.customFields&&this.tooltipConfig.customFields.forEach(i=>{const s=t.data[i];void 0!==s&&e.push(`${i}: ${s}`)}),i=e.join("<br>")}this.tooltip.innerHTML=i,e&&(this.tooltip.style.left=`${e.x}px`,this.tooltip.style.top=`${e.y}px`),this.tooltip.style.display="block"}hideTooltip(){this.tooltip&&(this.tooltip.style.display="none")}configureTooltip(t){this.tooltipConfig={...this.tooltipConfig,...t},!t.enabled&&this.tooltip&&this.hideTooltip()}clearGraph(){this.nodes.clear(),this.links=[],this.edges.clear(),this.filteredNodes=null,this.currentFilterNodeId=null,this.renderer?.clearElements(),this.debug&&console.log("GraphNetwork: Graph data cleared")}addNode(t,e={}){try{if(!e.skipValidation){if(!h(t))throw new u("Invalid node data. Must have id and name properties.",t);if(!t.id||"string"!=typeof t.id||""===t.id.trim())throw new u("Node id must be a non-empty string",t);if(!t.name||"string"!=typeof t.name||""===t.name.trim())throw new u("Node name must be a non-empty string",t);if(void 0!==t.type&&"string"!=typeof t.type)throw new u("Node type must be a string",t);if(void 0!==t.size&&("number"!=typeof t.size||t.size<=0||!isFinite(t.size)||isNaN(t.size)))throw new u("Node size must be a positive finite number",t)}if(this.nodes.has(t.id))throw new p(t.id);const i=this.container.getBoundingClientRect(),n=i.width||800,o=i.height||600,a=new s(t,n,o);return void 0!==e.x&&void 0!==e.y&&(a.position.x=e.x,a.position.y=e.y),this.nodes.set(t.id,a),this.currentTransaction&&this.currentTransaction.operations.push({type:"addNode",targetId:t.id,timestamp:Date.now(),beforeState:null,afterState:{...t}}),e.skipRedraw||(this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend(Array.from(this.nodes.values()))),this.debug&&console.log(`GraphNetwork: Added node "${t.name}" (${t.id})`),this.emit("nodeAdded",{node:a,nodeId:t.id,nodeData:{...t},type:"nodeAdded",timestamp:Date.now()}),a}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to add node:",E.getErrorDetails(t)),t}}deleteNode(t,e={}){try{const i=this.nodes.get(t);if(!i)throw new m(t);const s={...i.data},n=[];return this.edges.forEach((e,i)=>{e.source!==t&&e.target!==t||n.push({...e})}),this.links=this.links.filter(e=>e.source.getId()!==t&&e.target.getId()!==t),n.forEach(t=>{t.id&&this.edges.delete(t.id)}),this.nodes.delete(t),this.currentFilterNodeId===t&&this.resetFilter(),this.filteredNodes?.has(t)&&(this.filteredNodes.delete(t),0===this.filteredNodes.size&&(this.filteredNodes=null)),e.skipRedraw||(this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend(Array.from(this.nodes.values()))),this.currentTransaction&&this.currentTransaction.operations.push({type:"deleteNode",targetId:t,timestamp:Date.now(),beforeState:s,afterState:null}),this.debug&&console.log(`GraphNetwork: Deleted node "${t}" and ${n.length} connected edges`),this.emit("nodeRemoved",{nodeId:t,nodeData:s,connectedEdges:n,type:"nodeRemoved",timestamp:Date.now()}),n.forEach(t=>{this.emit("linkRemoved",{linkData:t,type:"linkRemoved",timestamp:Date.now()})}),!0}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to delete node:",E.getErrorDetails(t)),t}}removeNode(t,e=!0){return this.deleteNode(t,{skipRedraw:!e})}addEdge(t,e={}){try{if(!e.skipValidation){if(!t.id||"string"!=typeof t.id||""===t.id.trim())throw new f("Edge id must be a non-empty string",t);if(!t.source||"string"!=typeof t.source)throw new f("Edge source must be a non-empty string",t);if(!t.target||"string"!=typeof t.target)throw new f("Edge target must be a non-empty string",t);if(t.source===t.target)throw new f("Edge cannot connect node to itself",t)}if(this.edges.has(t.id))throw new y(t.id);const i=this.nodes.get(t.source),s=this.nodes.get(t.target),n=[];if(i||n.push(t.source),s||n.push(t.target),n.length>0)throw new S(t.source,t.target,n);if(void 0!==t.weight&&("number"!=typeof t.weight||t.weight<0))throw new f("Edge weight must be a non-negative number",t);if(void 0!==t.line_type&&!["solid","dashed","dotted"].includes(t.line_type))throw new f('Edge line_type must be "solid", "dashed", or "dotted"',t);const o={source:i,target:s,label:t.label||"",weight:t.weight||1,line_type:t.line_type||"solid"};return this.edges.set(t.id,{...t}),this.links.push(o),this.currentTransaction&&this.currentTransaction.operations.push({type:"addEdge",targetId:t.id,timestamp:Date.now(),beforeState:null,afterState:{...t}}),e.skipRedraw||this.renderer?.createElements(this.nodes,this.links),this.debug&&console.log(`GraphNetwork: Added edge "${t.id}" (${t.source} -> ${t.target})`),this.emit("linkAdded",{linkData:{...t},edgeId:t.id,type:"linkAdded",timestamp:Date.now()}),o}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to add edge:",E.getErrorDetails(t)),t}}addLink(t,e=!0){const i={id:t.id||`${t.source}-${t.target}`,source:t.source,target:t.target,label:t.label,weight:t.weight,line_type:t.line_type,color:t.color};return this.addEdge(i,{skipRedraw:!e})}deleteEdge(t,e={}){try{const i=this.edges.get(t);if(!i)throw new w(t);this.edges.delete(t);const s=this.links.length;return this.links=this.links.filter(e=>`${e.source.getId()}-${e.target.getId()}`!==t&&!(e.source.getId()===i.source&&e.target.getId()===i.target)),this.links.length<s?(e.skipRedraw||this.renderer?.createElements(this.nodes,this.links),this.currentTransaction&&this.currentTransaction.operations.push({type:"deleteEdge",targetId:t,timestamp:Date.now(),beforeState:{...i},afterState:null}),this.debug&&console.log(`GraphNetwork: Deleted edge "${t}" (${i.source} -> ${i.target})`),this.emit("linkRemoved",{linkData:{...i},edgeId:t,type:"linkRemoved",timestamp:Date.now()}),!0):(this.debug&&console.warn(`GraphNetwork: Edge "${t}" was tracked but not found in render links`),!1)}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to delete edge:",E.getErrorDetails(t)),t}}removeLink(t,e,i=!0){let s=null;for(const[i,n]of this.edges.entries())if(n.source===t&&n.target===e){s=i;break}if(s)return this.deleteEdge(s,{skipRedraw:!i});const n=this.links.length;this.links=this.links.filter(i=>!(i.source.getId()===t&&i.target.getId()===e));const o=this.links.length<n;return o&&i&&this.renderer?.createElements(this.nodes,this.links),this.debug&&o&&console.log(`GraphNetwork: Removed untracked link ${t} -> ${e}`),o&&this.emit("linkRemoved",{linkData:{source:t,target:e},type:"linkRemoved",timestamp:Date.now()}),o}getNodes(){return Array.from(this.nodes.values()).map(t=>({...t.data}))}getLinks(){return this.links.map(t=>({source:t.source.getId(),target:t.target.getId(),label:t.label,weight:t.weight,line_type:t.line_type}))}getData(){return{nodes:this.getNodes(),links:this.getLinks()}}getNode(t){const e=this.nodes.get(t);return e?{...e.data}:null}getEdge(t){const e=this.edges.get(t);return e?{...e}:null}hasNode(t){return this.nodes.has(t)}hasEdge(t){return this.edges.has(t)}updateNode(t,e,i={}){try{const s=this.nodes.get(t);if(!s)throw new m(t);if(void 0!==e.name&&("string"!=typeof e.name||""===e.name.trim()))throw new u("Node name must be a non-empty string",e);if(void 0!==e.type&&"string"!=typeof e.type)throw new u("Node type must be a string",e);if(void 0!==e.size&&("number"!=typeof e.size||e.size<=0))throw new u("Node size must be a positive number",e);const n={...s.data};return Object.assign(s.data,e),i.skipRedraw||(this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend(Array.from(this.nodes.values()))),this.currentTransaction&&this.currentTransaction.operations.push({type:"updateNode",targetId:t,timestamp:Date.now(),beforeState:n,afterState:{...s.data}}),this.debug&&console.log(`GraphNetwork: Updated node "${t}"`),this.emit("nodeUpdated",{nodeId:t,nodeData:{...s.data},oldData:n,type:"nodeUpdated",timestamp:Date.now()}),!0}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to update node:",E.getErrorDetails(t)),t}}updateEdge(t,e,i={}){try{const s=this.edges.get(t);if(!s)throw new w(t);if(void 0!==e.weight&&("number"!=typeof e.weight||e.weight<0))throw new f("Edge weight must be a non-negative number",e);if(void 0!==e.line_type&&!["solid","dashed","dotted"].includes(e.line_type))throw new f('Edge line_type must be "solid", "dashed", or "dotted"',e);const n={...s};Object.assign(s,e),this.edges.set(t,s);const o=this.links.find(t=>t.source.getId()===s.source&&t.target.getId()===s.target);return o&&(void 0!==e.label&&(o.label=e.label||""),void 0!==e.weight&&(o.weight=e.weight),void 0!==e.line_type&&(o.line_type=e.line_type)),i.skipRedraw||this.renderer?.createElements(this.nodes,this.links),this.currentTransaction&&this.currentTransaction.operations.push({type:"updateEdge",targetId:t,timestamp:Date.now(),beforeState:n,afterState:{...s}}),this.debug&&console.log(`GraphNetwork: Updated edge "${t}"`),this.emit("linkUpdated",{linkData:{...s},oldData:n,edgeId:t,type:"linkUpdated",timestamp:Date.now()}),!0}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to update edge:",E.getErrorDetails(t)),t}}updateNodes(t,e={}){try{const i=[],s=[];if(!e.skipValidation){for(const e of t){if(!e.id||"string"!=typeof e.id)throw new u("Node update must include a valid ID",e);this.nodes.has(e.id)?(void 0===e.name||"string"==typeof e.name&&""!==e.name.trim()||s.push({nodeId:e.id,error:new u("Node name must be a non-empty string",e)}),void 0!==e.size&&("number"!=typeof e.size||e.size<=0)&&s.push({nodeId:e.id,error:new u("Node size must be a positive number",e)})):s.push({nodeId:e.id,error:new m(e.id)})}if(s.length>0)throw new Error(`Bulk node update validation failed for ${s.length} nodes: ${s.map(t=>`${t.nodeId}: ${t.error.message}`).join(", ")}`)}this.currentTransaction&&this.currentTransaction.operations.push({type:"updateNode",targetId:`bulk-${t.length}-nodes`,timestamp:Date.now(),beforeState:t.map(t=>({...this.nodes.get(t.id)?.data})),afterState:t});for(const e of t){const t=this.nodes.get(e.id);if(!t)continue;const s={...t.data},{id:n,...o}=e;Object.assign(t.data,o),i.push(e.id),this.debug&&console.log(`GraphNetwork: Bulk updated node "${e.id}"`),this.emit("nodeUpdated",{nodeId:e.id,nodeData:{...t.data},oldData:s,type:"nodeUpdated",timestamp:Date.now()})}return!e.skipRedraw&&i.length>0&&(this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend(Array.from(this.nodes.values()))),i.length>0&&this.emit("nodesBulkUpdated",{nodeIds:i,count:i.length,type:"nodesBulkUpdated",timestamp:Date.now()}),this.debug&&console.log(`GraphNetwork: Bulk updated ${i.length} nodes`),i}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to bulk update nodes:",E.getErrorDetails(t)),t}}updateEdges(t,e={}){try{const i=[],s=[];if(!e.skipValidation){for(const e of t){if(!e.id||"string"!=typeof e.id)throw new f("Edge update must include a valid ID",e);this.edges.has(e.id)?(void 0!==e.weight&&("number"!=typeof e.weight||e.weight<0)&&s.push({edgeId:e.id,error:new f("Edge weight must be a non-negative number",e)}),void 0===e.line_type||["solid","dashed","dotted"].includes(e.line_type)||s.push({edgeId:e.id,error:new f('Edge line_type must be "solid", "dashed", or "dotted"',e)})):s.push({edgeId:e.id,error:new w(e.id)})}if(s.length>0)throw new Error(`Bulk edge update validation failed for ${s.length} edges: ${s.map(t=>`${t.edgeId}: ${t.error.message}`).join(", ")}`)}this.currentTransaction&&this.currentTransaction.operations.push({type:"updateEdge",targetId:`bulk-${t.length}-edges`,timestamp:Date.now(),beforeState:t.map(t=>({...this.edges.get(t.id)})),afterState:t});for(const e of t){const t=this.edges.get(e.id);if(!t)continue;const s={...t},{id:n,...o}=e;Object.assign(t,o),this.edges.set(e.id,t);const a=this.links.find(e=>e.source.getId()===t.source&&e.target.getId()===t.target);a&&(void 0!==o.label&&(a.label=o.label||""),void 0!==o.weight&&(a.weight=o.weight),void 0!==o.line_type&&(a.line_type=o.line_type)),i.push(e.id),this.debug&&console.log(`GraphNetwork: Bulk updated edge "${e.id}"`),this.emit("linkUpdated",{linkData:{...t},oldData:s,edgeId:e.id,type:"linkUpdated",timestamp:Date.now()})}return!e.skipRedraw&&i.length>0&&this.renderer?.createElements(this.nodes,this.links),i.length>0&&this.emit("edgesBulkUpdated",{edgeIds:i,count:i.length,type:"edgesBulkUpdated",timestamp:Date.now()}),this.debug&&console.log(`GraphNetwork: Bulk updated ${i.length} edges`),i}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to bulk update edges:",E.getErrorDetails(t)),t}}setData(t,e={}){try{if(!e.skipValidation&&!d(t))throw new Error("Invalid graph data format. Must contain nodes and links arrays.");const i=this.nodes.size,s=this.links.length,o=new Map;if(e.preservePositions)for(const[t,e]of this.nodes.entries())o.set(t,{x:e.position.x,y:e.position.y});if(this.debug&&console.log(`GraphNetwork: Setting data with ${t.nodes.length} nodes and ${t.links.length} links`,e.preservePositions?"(preserving positions)":""),this.currentTransaction&&this.currentTransaction.operations.push({type:"setData",targetId:"graph",timestamp:Date.now(),beforeState:this.getData(),afterState:t}),this.clearGraph(),this.parseData(t),e.preservePositions&&o.size>0)for(const[t,e]of this.nodes.entries()){const i=o.get(t);i&&(e.position.x=i.x,e.position.y=i.y)}this.renderer&&this.renderer.createElements(this.nodes,this.links),this.events&&this.renderer&&(this.events.updateCallbacks(this.eventCallbacks),this.events.initialize(this.renderer.getSVGElement(),this.nodes)),this.ui&&this.ui.createLegend(Array.from(this.nodes.values())),("reset"===e.layout||!e.preservePositions&&"preserve"!==e.layout)&&this.resetAllNodePositions(),this.physics||(this.physics=new n({damping:this.config.damping,repulsionStrength:this.config.repulsionStrength,attractionStrength:this.config.attractionStrength,groupingStrength:this.config.groupingStrength})),this.isAnimating||this.startAnimation(),this.emit("dataLoaded",{nodeCount:this.nodes.size,linkCount:this.links.length,oldNodeCount:i,oldLinkCount:s,preservedPositions:e.preservePositions&&o.size,type:"dataLoaded",timestamp:Date.now()}),this.debug&&console.log(`GraphNetwork: Data set successfully with ${this.nodes.size} nodes and ${this.links.length} links`)}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to set data:",E.getErrorDetails(t)),t}}mergeData(t,e={}){try{if(!d(t))throw new Error("Invalid graph data format. Must contain nodes and links arrays.");const i={nodesAdded:0,nodesUpdated:0,nodesSkipped:0,edgesAdded:0,edgesUpdated:0,edgesSkipped:0,errors:[]};this.debug&&console.log(`GraphNetwork: Merging data with ${t.nodes.length} nodes and ${t.links.length} links`),this.currentTransaction&&this.currentTransaction.operations.push({type:"mergeData",targetId:"graph",timestamp:Date.now(),beforeState:this.getData(),afterState:t});for(const s of t.nodes)try{if(this.nodes.has(s.id)){if("error"===e.nodeConflictResolution)throw new p(s.id);if("preserve"===e.nodeConflictResolution){i.nodesSkipped++;continue}{const{id:t,...e}=s;this.updateNode(s.id,e,{skipRedraw:!0}),i.nodesUpdated++}}else this.addNode(s,{skipRedraw:!0}),i.nodesAdded++}catch(t){if(t instanceof p&&"error"===e.nodeConflictResolution)throw t;const n=t instanceof Error?t.message:String(t);i.errors.push(`Node ${s.id}: ${n}`)}for(const s of t.links)try{const t=s.id||`${s.source}-${s.target}`;if(this.edges.has(t)){if("error"===e.edgeConflictResolution)throw new y(t);if("preserve"===e.edgeConflictResolution){i.edgesSkipped++;continue}{const{id:e,source:n,target:o,...a}=s;this.updateEdge(t,a,{skipRedraw:!0}),i.edgesUpdated++}}else{const e={id:t,source:s.source,target:s.target,label:s.label,weight:s.weight,line_type:s.line_type,color:s.color};this.addEdge(e,{skipRedraw:!0}),i.edgesAdded++}}catch(t){const e=t instanceof Error?t.message:String(t);i.errors.push(`Edge ${s.source}-${s.target}: ${e}`)}e.skipRedraw||(this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend(Array.from(this.nodes.values()))),this.emit("dataMerged",{results:i,type:"dataMerged",timestamp:Date.now()}),this.debug&&console.log("GraphNetwork: Data merge completed:",i),i.errors.length>0&&this.debug&&console.warn("GraphNetwork: Merge completed with errors:",i.errors)}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to merge data:",E.getErrorDetails(t)),t}}clearData(t={}){try{const e=this.nodes.size,i=this.links.length;this.debug&&console.log(`GraphNetwork: Clearing ${e} nodes and ${i} links`),this.currentTransaction&&this.currentTransaction.operations.push({type:"clearData",targetId:"graph",timestamp:Date.now(),beforeState:this.getData(),afterState:{nodes:[],links:[]}}),t.animate&&this.debug&&console.log("GraphNetwork: Animation not yet implemented for clearData"),this.clearGraph(),this.renderer?.createElements(this.nodes,this.links),this.ui?.createLegend([]),this.isAnimating&&this.stopAnimation(),this.emit("dataCleared",{clearedNodeCount:e,clearedLinkCount:i,type:"dataCleared",timestamp:Date.now()}),this.debug&&console.log("GraphNetwork: Data cleared successfully")}catch(t){throw this.debug&&console.error("GraphNetwork: Failed to clear data:",E.getErrorDetails(t)),t}}replaceData(t,e={}){return this.setData(t,e)}startTransaction(){if(this.currentTransaction)throw new Error("Transaction already in progress. Commit or rollback current transaction first.");const t=`tx-${++this.transactionIdCounter}-${Date.now()}`;return this.currentTransaction={id:t,startTime:Date.now(),operations:[],beforeSnapshot:this.getData()},this.debug&&console.log(`GraphNetwork: Started transaction "${t}"`),t}commitTransaction(){if(!this.currentTransaction)throw new Error("No transaction in progress");const t=this.currentTransaction,e=Date.now()-t.startTime;this.currentTransaction=null;const i={id:t.id,operationCount:t.operations.length,duration:e};return this.debug&&console.log(`GraphNetwork: Committed transaction "${t.id}" with ${t.operations.length} operations in ${e}ms`),this.emit("transactionCommitted",{transactionId:t.id,operationCount:t.operations.length,duration:e,type:"transactionCommitted",timestamp:Date.now()}),i}rollbackTransaction(){if(!this.currentTransaction)throw new Error("No transaction in progress");const t=this.currentTransaction,e=Date.now()-t.startTime;try{this.debug&&console.log(`GraphNetwork: Rolling back transaction "${t.id}" with ${t.operations.length} operations`),this.setData(t.beforeSnapshot,{skipValidation:!0,preservePositions:!1});const i={id:t.id,operationCount:t.operations.length,duration:e};return this.currentTransaction=null,this.debug&&console.log(`GraphNetwork: Rolled back transaction "${t.id}" in ${e}ms`),this.emit("transactionRolledBack",{transactionId:t.id,operationCount:t.operations.length,duration:e,type:"transactionRolledBack",timestamp:Date.now()}),i}catch(t){throw this.currentTransaction=null,this.debug&&console.error("GraphNetwork: Failed to rollback transaction:",E.getErrorDetails(t)),t}}getTransactionStatus(){return this.currentTransaction?{id:this.currentTransaction.id,startTime:this.currentTransaction.startTime,operationCount:this.currentTransaction.operations.length,duration:Date.now()-this.currentTransaction.startTime}:null}isInTransaction(){return null!==this.currentTransaction}getNodeInstance(t){return this.nodes.get(t)||null}getStats(){return{nodeCount:this.nodes.size,linkCount:this.links.length,visibleNodeCount:this.filteredNodes?.size||this.nodes.size,filteredNodeId:this.currentFilterNodeId,filterDepth:this.config.filterDepth,isAnimating:this.isAnimating,fps:this.fps,lastUpdateTime:this.lastFrameTime}}getConfig(){return{...this.config}}updateConfig(t){Object.assign(this.config,t),this.physics&&(t.damping||t.repulsionStrength||t.attractionStrength||t.groupingStrength)&&this.physics.updateConfig(t),this.ui&&(t.theme||t.title)&&(this.ui.updateConfig(t),t.theme&&this.setTheme(t.theme)),this.events&&(t.zoomSensitivity||t.filterDepth)&&this.events.updateConfig(t),this.debug&&console.log("GraphNetwork: Configuration updated:",t),this.emit("configUpdated",{updates:t})}export(t){const{format:e,includeMetadata:i=!1,filename:s}=t;switch(e){case"json":{const t={nodes:this.getNodes(),links:this.getLinks()};i&&(t.metadata={exportTime:(new Date).toISOString(),stats:this.getStats(),config:this.getConfig(),version:"2.0.0"});const e=JSON.stringify(t,null,2);return s?void this.downloadFile(e,s,"application/json"):e}case"csv":{const t=this.getNodes(),e=this.getLinks();let i="Type,Id,Name,Source,Target,Label,Weight\n";return t.forEach(t=>{i+=`node,${t.id},"${t.name}",,,\n`}),e.forEach(t=>{i+=`link,,,"${t.source}","${t.target}","${t.label||""}",${t.weight||1}\n`}),s?void this.downloadFile(i,s,"text/csv"):i}case"svg":{const t=this.renderer?.getSVGElement();if(!t)throw new Error("SVG renderer not available");const e=(new XMLSerializer).serializeToString(t);return s?void this.downloadFile(e,s,"image/svg+xml"):e}case"png":throw new Error("PNG export not yet implemented");default:throw new Error(`Unsupported export format: ${e}`)}}downloadFile(t,e,i){const s=new Blob([t],{type:i}),n=URL.createObjectURL(s),o=document.createElement("a");o.href=n,o.download=e,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n)}selectNode(t,e){return this.selectionManager?.selectNode(t,e)||!1}selectNodes(t,e){return this.selectionManager?.selectNodes(t,e)||[]}selectEdge(t,e){return this.selectionManager?.selectEdge(t,e)||!1}selectEdges(t,e){return this.selectionManager?.selectEdges(t,e)||[]}deselectNode(t){return this.selectionManager?.deselectNode(t)||!1}deselectEdge(t){return this.selectionManager?.deselectEdge(t)||!1}deselectAll(){this.selectionManager?.deselectAll()}toggleNodeSelection(t){return this.selectionManager?.toggleNodeSelection(t)||!1}toggleEdgeSelection(t){return this.selectionManager?.toggleEdgeSelection(t)||!1}isNodeSelected(t){return this.selectionManager?.isNodeSelected(t)||!1}isEdgeSelected(t){return this.selectionManager?.isEdgeSelected(t)||!1}getSelectedNodes(){return this.selectionManager?.getSelectedNodes()||[]}getSelectedEdges(){return this.selectionManager?.getSelectedEdges()||[]}setSelectionMode(t){this.selectionManager?.setSelectionMode(t)}getSelectionMode(){return this.selectionManager?.getSelectionMode()||"multi"}setNodeStyle(t,e){this.styleManager?.setNodeStyle(t,e)}setEdgeStyle(t,e){this.styleManager?.setEdgeStyle(t,e)}updateStyles(t,e){this.styleManager?.updateStyles(t,e)}resetStyle(t){this.styleManager?.resetStyle(t)}getNodeStyle(t){return this.styleManager?.getNodeStyle(t)||null}getEdgeStyle(t){return this.styleManager?.getEdgeStyle(t)||null}highlightNode(t,e){this.highlightManager?.highlightNode(t,e)}highlightNodes(t,e){this.highlightManager?.highlightNodes(t,e)}highlightEdge(t,e){this.highlightManager?.highlightEdge(t,e)}highlightEdges(t,e){this.highlightManager?.highlightEdges(t,e)}highlightPath(t,e,i){return this.highlightManager?.highlightPath(t,e,i)||null}highlightNeighbors(t,e){return this.highlightManager?.highlightNeighbors(t,e)||[]}highlightConnections(t,e){return this.highlightManager?.highlightConnections(t,e)||[]}clearHighlights(){this.highlightManager?.clearHighlights()}clearNodeHighlight(t){this.highlightManager?.clearNodeHighlight(t)}clearEdgeHighlight(t){this.highlightManager?.clearEdgeHighlight(t)}isNodeHighlighted(t){return this.highlightManager?.isNodeHighlighted(t)||!1}isEdgeHighlighted(t){return this.highlightManager?.isEdgeHighlighted(t)||!1}getHighlightedNodes(){return this.highlightManager?.getHighlightedNodes()||[]}getHighlightedEdges(){return this.highlightManager?.getHighlightedEdges()||[]}async focusOnNode(t,e){this.cameraController&&await this.cameraController.focusOnNode(t,e)}async focusOnNodes(t,e){this.cameraController&&await this.cameraController.focusOnNodes(t,e)}async fitToView(t){this.cameraController&&await this.cameraController.fitToView(t)}async centerView(){this.cameraController&&await this.cameraController.centerView()}isCameraAnimating(){return this.cameraController?.isAnimating()||!1}stopCameraAnimation(){this.cameraController?.stopAnimation()}on(t,e){this.customEventListeners.has(t)||this.customEventListeners.set(t,[]),this.customEventListeners.get(t).push(e),this.events?.on(t,e)}off(t,e){const i=this.customEventListeners.get(t);if(i){const t=i.indexOf(e);-1!==t&&i.splice(t,1)}this.events?.off(t,e)}emit(t,e={}){const i=this.customEventListeners.get(t);i&&i.forEach(i=>{try{i(e)}catch(e){console.error(`Error in custom event callback for '${t}':`,e)}}),this.events?.emit(t,e)}toObject(){return{stats:this.getStats(),config:this.getConfig(),data:{nodes:this.getNodes(),links:this.getLinks()},modules:{physics:this.physics?.toObject(),renderer:this.renderer?.toObject(),ui:this.ui?.toObject(),events:this.events?.toObject()},type:"GraphNetwork",version:"2.0.0"}}destroy(){this.debug&&console.log("GraphNetwork: Destroying instance"),this.stopAnimation(),this.physics=null,this.renderer?.destroy(),this.ui?.destroy(),this.events?.destroy(),this.selectionManager?.clearSelection(),this.styleManager?.clearStyles(),this.highlightManager?.clearHighlights(),this.cameraController?.stopAnimation(),this.selectionManager=null,this.styleManager=null,this.highlightManager=null,this.cameraController=null,this.tooltip&&this.tooltip.parentNode&&(this.tooltip.parentNode.removeChild(this.tooltip),this.tooltip=null),this.clearGraph(),this.customEventListeners.clear(),this.emit("destroyed",{uptime:Date.now()-this.startTime,finalStats:this.getStats()})}toString(){return`GraphNetwork(${this.containerId}: ${this.nodes.size} nodes, ${this.links.length} links, ${this.config.theme} theme)`}};return e.default}()});